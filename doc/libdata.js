/* Index used for searching */
/*
   Fields used:
     url, name, type, filename, authors, routine name, comments, parameters,
     categories, and attributes
*/
title = "API Documentation for AtomNeb-idl";
subtitle = "IDL Library for Atomic Data of Ionized Nebulae";
libdata = new Array();
libdataItem = 0;



libdata[libdataItem++] = new Array("./atomneb__define.html", "atomneb__define.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb__define.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::init", "atomneb::init", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::init", "      Unit for AtomNeb IDL Library :      This obejct library can be used      to read atomic data from AtomNeb, which is a database      containing atomic data stored in the Flexible Image      Transport System (FITS) file format for collisionally      excited lines and recombination lines typically      observed in spectra of ionized gaseous nebulae.   ", "", "Collisionally Excited Lines Recombination Lines", "   0.2.0        12/05/2020, A. Danehkar, Create object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atm-&gt;set_data_cel,'chianti70'   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::free", "atomneb::free", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::free", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::read_elj_list", "atomneb::read_elj_list", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::read_elj_list", "     This function returns the list of energy levels (Ej) from the 1st binary table extension      of the FITS data file ('AtomElj.fits')   ", "", "Collisionally Excited Lines", "   0.2.0        24/12/2015, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       type=an array of data. This function returns the elj_data_list:           { Elj_Data:'',             Extention:0.0}   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::read_omij_list", "atomneb::read_omij_list", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::read_omij_list", "     This function returns the list of collision strengths (omega_ij) from the 1st binary table extension      of the FITS data file ('AtomOmij.fits').   ", "", "Collisionally Excited Lines", "   0.2.0        24/12/2015, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       type=an array of data. This function returns the omij_data_list:           { Omij_Data:'',             Extention:0.0}   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::read_aij_list", "atomneb::read_aij_list", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::read_aij_list", "     This function returns the list of transition probabilities (Aij) from the 1st binary table extension      of the FITS data file ('AtomAij.fits').   ", "", "Collisionally Excited Lines", "   0.2.0        24/12/2015, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       type=an array of data. This function returns the aij_data_list:           { Aij_Data:'',             Extention:0.0}   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::read_elj_references", "atomneb::read_elj_references", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::read_elj_references", "     This function returns the reference list of energy levels (Ej) from the 2nd binary table extension      of the FITS data file ('AtomElj.fits').   ", "", "Collisionally Excited Lines", "   0.2.0        24/12/2015, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       type=an array of data. This function returns the aij_data_reference:           { Reference:'',             Citation:''}   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::read_omij_references", "atomneb::read_omij_references", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::read_omij_references", "     This function returns the reference list of collision strengths (omega_ij) from the 2nd binary table extension      of the FITS data file ('AtomOmij.fits').   ", "", "Collisionally Excited Lines", "   0.2.0        24/12/2015, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       type=an array of data. This function returns the aij_data_reference:           { Reference:'',             Citation:''}   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::read_aij_references", "atomneb::read_aij_references", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::read_aij_references", "     This function returns the reference list of transition probabilities (Aij) from the 1nd binary table extension      of the FITS data file ('AtomAij.fits').   ", "", "Collisionally Excited Lines", "   0.2.0        24/12/2015, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       type=an array of data. This function returns the aij_data_reference:           { Reference:'',             Citation:''}   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::read_elj", "atomneb::read_elj", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::read_elj", "     This function returns the energy levels (Ej) from the table extensions      of the FITS data file ('AtomElj.fits').   ", "level_num                     set for the maximum level number.   atom                     atom name e.g. 'o'  ion                     ionic level e.g 'iii'   ", "Collisionally Excited Lines", "   0.2.0        24/12/2015, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atm-&gt;set_data_cel,'collection' <span class= code-prompt >IDL&gt;</span> atom='o' <span class= code-prompt >IDL&gt;</span> ion='iii' <span class= code-prompt >IDL&gt;</span> oiii_elj_data=atm-&gt;read_elj(atom, ion, level_num=6) <span class= code-prompt >IDL&gt;</span> print,oiii_elj_data.J_v <span class= code-output >   0.00000      1.00000      2.00000      2.00000      0.00000      2.00000</span> <span class= code-prompt >IDL&gt;</span> print,oiii_elj_data.Ej <span class= code-output >   0.0000000       113.17800       306.17400       20273.270       43185.740       60324.790</span>      type=an array of data. This function returns the elj_data:           { Configuration:'',             Term:'',             J:'',             J_v:0.0,             Ej:0.0,             Reference:''}.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::get_elj_reference_citation", "atomneb::get_elj_reference_citation", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::get_elj_reference_citation", "     This function returns the reference citation for energy levels (Ej)      from the 2nd binary table extension of the FITS data file ('AtomElj.fits').   ", "reference                     set for the reference e.g. 'L7288'   ", "Collisionally Excited Lines", "   0.2.0        24/12/2015, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atm-&gt;set_data_cel,'collection' <span class= code-prompt >IDL&gt;</span> reference='L7288' <span class= code-prompt >IDL&gt;</span> citation=atm-&gt;get_elj_reference_citation(reference) <span class= code-prompt >IDL&gt;</span> print,citation <span class= code-output >   C. E. Moore, in CRC Series in Evaluated Data in Atomic Physics, 339 pp. (CRC Press, Boca Raton, FL, 1993)</span>      type=string. This function returns the Citation.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::read_omij", "atomneb::read_omij", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::read_omij", "     This function returns the collision strengths (omega_ij) from the table extensions      of the FITS data file ('AtomOmij.fits').   ", "reference                     set for the reference e.g. 'SSB14'  level_num                     set for the maximum level number.   atom                     atom name e.g. 'o'  ion                     ionic level e.g 'iii'   ", "Collisionally Excited Lines", "   0.2.0        24/12/2015, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atm-&gt;set_data_cel,'collection' <span class= code-prompt >IDL&gt;</span> atom='o' <span class= code-prompt >IDL&gt;</span> ion='iii' <span class= code-prompt >IDL&gt;</span> reference='SSB14' <span class= code-prompt >IDL&gt;</span> oiii_omij_data=atm-&gt;read_omij(atom, ion, reference=reference) <span class= code-prompt >IDL&gt;</span> print,oiii_omij_data.level1 <span class= code-output >   0       1       1       1       1       2       2       2       3       3       4</span> <span class= code-prompt >IDL&gt;</span> print,oiii_omij_data.level2 <span class= code-output >   0       2       3       4       5       3       4       5       4       5       5</span> <span class= code-prompt >IDL&gt;</span> print,oiii_omij_data[0].strength <span class= code-output >   100.00000       125.89254       158.48932       199.52623       251.18864       ...</span>      type=an array of data. This function returns the omij_data:           { level1:0,             level2:0,             strength:dblarr(temp_steps)}.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::search_omij", "atomneb::search_omij", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::search_omij", "     This function searches collision strengths (omega_ij) for given element      and ionic levels in the FITS data file ('AtomOmij.fits'), and returns the data entry.   ", "atom                     atom name e.g. 'o'  ion                     ionic level e.g 'iii'   ", "Collisionally Excited Lines", "   0.2.0        24/12/2015, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atm-&gt;set_data_cel,'collection' <span class= code-prompt >IDL&gt;</span> atom='o' <span class= code-prompt >IDL&gt;</span> ion='iii' <span class= code-prompt >IDL&gt;</span> list_oiii_omij_data=atm-&gt;search_omij(atom, ion) <span class= code-prompt >IDL&gt;</span> print,list_oiii_omij_data <span class= code-output >   o_iii_omij_AK99 o_iii_omij_LB94 o_iii_omij_Pal12-AK99 o_iii_omij_SSB14</span>      type=array of data. This function returns the Omij_Data.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::list_omij_references", "atomneb::list_omij_references", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::list_omij_references", "     This function returns a list for all references of collision strengths (Omega_ij)      for given element and ionic level from the FITS data file ('AtomOmij.fits').   ", "atom                     atom name e.g. 'o'  ion                     ionic level e.g 'iii'   ", "Collisionally Excited Lines", "   0.2.0        15/01/2017, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atm-&gt;set_data_cel,'collection' <span class= code-prompt >IDL&gt;</span> atom='o' <span class= code-prompt >IDL&gt;</span> ion='iii' <span class= code-prompt >IDL&gt;</span> list_oiii_omij_reference=atm-&gt;list_omij_references(atom, ion) <span class= code-prompt >IDL&gt;</span> print,list_oiii_omij_reference <span class= code-output >   AK99 LB94 Pal12-AK99 SSB14</span>      type=an array of strings. This function returns the references.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::get_omij_reference_citation", "atomneb::get_omij_reference_citation", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::get_omij_reference_citation", "     This function returns the reference citation for collision strengths (Omega_ij)      from the 2nd binary table extension of the FITS data file ('AtomOmij.fits').   ", "atom                     atom name e.g. 'o'  ion                     ionic level e.g 'iii'  reference                     set for the reference e.g. 'SSB14'   ", "Collisionally Excited Lines", "   0.2.0        24/12/2015, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atm-&gt;set_data_cel,'collection' <span class= code-prompt >IDL&gt;</span> atom='o' <span class= code-prompt >IDL&gt;</span> ion='iii' <span class= code-prompt >IDL&gt;</span> reference='SSB14' <span class= code-prompt >IDL&gt;</span> citation=atm-&gt;get_omij_reference_citation(atom, ion, reference) <span class= code-prompt >IDL&gt;</span> print,citation <span class= code-output >   Storey, P. J., Sochi, T., and Badnell, N. R. 2014, Astron.Astrophys., 441, 3028</span>      type=string. This function returns the Citation.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::read_aij", "atomneb::read_aij", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::read_aij", "     This function returns the transition probabilities (Aij) from the table extensions      of the FITS data file ('AtomAij.fits').   ", "reference                     set for the reference,  not necessary  level_num                     set for the maximum level number.   atom                     atom name e.g. 'o'  ion                     ionic level e.g 'iii'   ", "Collisionally Excited Lines", "   0.2.0        24/12/2015, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atm-&gt;set_data_cel,'collection' <span class= code-prompt >IDL&gt;</span> atom='o' <span class= code-prompt >IDL&gt;</span> ion='iii' <span class= code-prompt >IDL&gt;</span> reference='FFT04' <span class= code-prompt >IDL&gt;</span> oiii_aij_data=atm-&gt;read_aij(atom, ion, reference=reference) <span class= code-prompt >IDL&gt;</span> print,oiii_aij_data.Aij[*,*] <span class= code-output >   0.0000000   2.5960000e-05   3.0300000e-11   2.3220000e-06       0.0000000    0.0021910000</span> <span class= code-output >   0.0000000       0.0000000   9.6320000e-05    0.0069510000      0.22550000       230.80000</span> <span class= code-output >   0.0000000       0.0000000       0.0000000     0.020290000   0.00069980000       576.50000</span> <span class= code-output >   0.0000000       0.0000000       0.0000000       0.0000000       1.6850000    0.0057770000</span> <span class= code-output >   0.0000000       0.0000000       0.0000000       0.0000000       0.0000000   3.7600000e-11</span> <span class= code-output >   0.0000000       0.0000000       0.0000000       0.0000000       0.0000000       0.0000000</span>      type=an array of data. This function returns the aij_data:           { Aij:dblarr(n_level,n_level) }.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::get_aij_reference_citation", "atomneb::get_aij_reference_citation", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::get_aij_reference_citation", "     This function returns the reference citation for a transition probability (Aij)      from the 2nd binary table extension of the FITS data file ('AtoAij.fits')   ", "atom                     atom name e.g. 'o'  ion                     ionic level e.g 'iii'  reference                     set for the reference e.g. 'FFT04'   ", "Collisionally Excited Lines", "   0.2.0        24/12/2015, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atm-&gt;set_data_cel,'collection' <span class= code-prompt >IDL&gt;</span> atom='o' <span class= code-prompt >IDL&gt;</span> ion='iii' <span class= code-prompt >IDL&gt;</span> reference='FFT04' <span class= code-prompt >IDL&gt;</span> citation=atm-&gt;get_aij_reference_citation(atom, ion, reference) <span class= code-prompt >IDL&gt;</span> print,citation <span class= code-output >   Froese Fischer et al 2004, ADNDT 87, 1</span>      type=string. This function returns the Citation.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::search_aij", "atomneb::search_aij", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::search_aij", "     This function searches transition probabilities (Aij) for given element      and ionic levels in the FITS data file ('AtomAij.fits'), and returns the data entry.   ", "atom                     atom name e.g. 'o'  ion                     ionic level e.g 'iii'   ", "Collisionally Excited Lines", "   0.2.0        24/12/2015, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atm-&gt;set_data_cel,'collection' <span class= code-prompt >IDL&gt;</span> atom='o' <span class= code-prompt >IDL&gt;</span> ion='iii' <span class= code-prompt >IDL&gt;</span> list_oiii_aij_data=atm-&gt;search_aij(atom, ion) <span class= code-prompt >IDL&gt;</span> print,list_oiii_aij_data <span class= code-output >   o_iii_aij_FFT04-SZ00 o_iii_aij_FFT04 o_iii_aij_GMZ97-WFD96 o_iii_aij_SZ00-WFD96</span>      type=array of data. This function returns the Aij_Data.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::list_aij_references", "atomneb::list_aij_references", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::list_aij_references", "     This function returns a list for all references of transition probabilities (Aij)      for given element and ionic level from the FITS data file ('AtoAij.fits').   ", "atom                     atom name e.g. 'o'  ion                     ionic level e.g 'iii'   ", "Collisionally Excited Lines", "   0.2.0        15/01/2017, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atm-&gt;set_data_cel,'collection' <span class= code-prompt >IDL&gt;</span> atom='o' <span class= code-prompt >IDL&gt;</span> ion='iii' <span class= code-prompt >IDL&gt;</span> list_oiii_aij_reference=atm-&gt;list_aij_references(atom, ion) <span class= code-prompt >IDL&gt;</span> print,list_oiii_aij_reference <span class= code-output >   FFT04-SZ00 FFT04 GMZ97-WFD96 SZ00-WFD96</span>      type=an array of strings. This function returns the references.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::read_aeff_collection", "atomneb::read_aeff_collection", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::read_aeff_collection", "     This function returns the effective recombination coefficients (Aeff) from the table extensions      of the FITS data file ('rc_collection.fits').   ", "br                     set for the branching ratios (Br), may not necessary  reference                     set for the reference, not necessary   atom                     atom name e.g. 'c'  ion                     ionic level e.g 'iii'   ", "Recombination Lines", "   0.2.0        15/01/2017, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atom='c' <span class= code-prompt >IDL&gt;</span> ion='iii' ; C III <span class= code-prompt >IDL&gt;</span> cii_rc_data=atm-&gt;read_aeff_collection(atom, ion) <span class= code-prompt >IDL&gt;</span> temp=size(cii_rc_data.Wavelength,/DIMENSIONS) <span class= code-prompt >IDL&gt;</span> n_line=temp[0] <span class= code-prompt >IDL&gt;</span> for i=0,n_line-1 do print,cii_rc_data[i].Wavelength, cii_rc_data[i].a, $ <span class= code-prompt >IDL&gt;</span>                           cii_rc_data[i].b, cii_rc_data[i].c, $ <span class= code-prompt >IDL&gt;</span>                           cii_rc_data[i].d, cii_rc_data[i].f <span class= code-output >   914.00000      0.69280000     0.021400000    -0.016300000     -0.24310000     -0.88000000</span> <span class= code-output >   962.00000       1.0998000   -0.0042000000    -0.027900000     -0.22940000     -0.96560000</span> <span class= code-output >   ...</span>      type=an array of data. This function returns the effective recombination coefficients.            aeff_data (c_iii_aeff)            { Wavelength:0.0,              a: 0.0,              b: 0.0,              c: 0.0,              d: 0.0,              f: 0.0}             aeff_data (n_iii_aeff)            { a: 0.0,              b: 0.0,              c: 0.0}             aeff_data (n_iii_br)            {Wavelength: 0.0,             BR: 0.0, $             g1:0,             g2:0,             Mult1:'',             LowerTerm:'',             UpperTerm:'' }             aeff_data (o_iii_aeff)            {Term: '',             Case1: '',             a2: 0.0,             a4: 0.0,             a5: 0.0,             a6: 0.0,             b: 0.0,             c: 0.0,             d: 0.0}             aeff_data (o_iii_br)            {Wavelength:double(0.0),             Br_A: 0.0,             Br_B: 0.0,             Br_C: 0.0,             g1: 0,             g2: 0,             Mult1: '',             LowerTerm: '',             UpperTerm: ''}              aeff_data (ne_iii_aeff)             {Wavelength:0.0,              a: 0.0,              b: 0.0,              c: 0.0,              d: 0.0,              f: 0.0,              br: 0.0}   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::search_aeff_collection", "atomneb::search_aeff_collection", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::search_aeff_collection", "     This function searches effective recombination coefficients (Aeff) for given element      and ionic levels in the FITS data file ('rc_collection.fits'), and returns the data entry.   ", "br                     set for the branching ratios (Br), may not necessary   atom                     atom name e.g. 'c'  ion                     ionic level e.g 'iii'   ", "Recombination Lines", "   0.2.0        15/01/2017, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atom='c' <span class= code-prompt >IDL&gt;</span> ion='iii' ; C III <span class= code-prompt >IDL&gt;</span> list_cii_aeff_data=atm-&gt;search_aeff_collection(atom, ion) <span class= code-prompt >IDL&gt;</span> print,list_cii_aeff_data <span class= code-output >   c_iii_aeff</span>      type=array of data. This function returns the Aeff_Data.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::list_aeff_collection_references", "atomneb::list_aeff_collection_references", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::list_aeff_collection_references", "     This function returns a list for all references of recombination coefficients (Aeff)      for given element and ionic level from the FITS data file ('rc_collection.fits').   ", "br                     set for the branching ratios (Br), may not necessary   atom                     atom name e.g. 'c'  ion                     ionic level e.g 'iii'   ", "Recombination Lines", "   0.2.0        15/01/2017, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atom='c' <span class= code-prompt >IDL&gt;</span> ion='iii' ; C III <span class= code-prompt >IDL&gt;</span> list_cii_aeff_reference=atm-&gt;list_aeff_collection_references(atom, ion) <span class= code-prompt >IDL&gt;</span> print,list_cii_aeff_reference       type=an array of strings. This function returns the references.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::get_aeff_collection_reference_citation", "atomneb::get_aeff_collection_reference_citation", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::get_aeff_collection_reference_citation", "     This function returns the reference citation for a recombination coefficient (Aeff)      from the 2nd binary table extension of the FITS data file ('rc_collection.fits').   ", "br                     set for the branching ratios (Br), may not necessary  reference                     set for the reference, not necessary   atom                     atom name e.g. 'c'  ion                     ionic level e.g 'iii'   ", "Recombination Lines", "   0.2.0        15/01/2017, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atom='c' <span class= code-prompt >IDL&gt;</span> ion='iii' ; C III <span class= code-prompt >IDL&gt;</span> citation=atm-&gt;get_aeff_collection_reference_citation(atom, ion) <span class= code-prompt >IDL&gt;</span> print, citation <span class= code-output >   Davey, A. R., Storey, P. J. and Kisielius, R., Astron.Astrophys.Suppl., 142, 85, 2000</span>      type=string. This function returns the Citation.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::read_aeff_ppb91", "atomneb::read_aeff_ppb91", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::read_aeff_ppb91", "     This function returns the effective recombination coefficients (Aeff) from the table extensions      of the FITS data file ('rc_PPB91.fits').   ", "reference                     set for the reference,  not necessary   atom                     atom name e.g. 'c'  ion                     ionic level e.g 'iii'   ", "Recombination Lines", "   0.2.0        15/01/2017, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atom='c' <span class= code-prompt >IDL&gt;</span> ion='iii' ; C II <span class= code-prompt >IDL&gt;</span> cii_rc_data=atm-&gt;read_aeff_ppb91(atom, ion) <span class= code-prompt >IDL&gt;</span> temp=size(cii_rc_data.Wavelength,/DIMENSIONS) <span class= code-prompt >IDL&gt;</span> n_line=temp[0] <span class= code-prompt >IDL&gt;</span> for i=0,n_line-1 do print,cii_rc_data[i].Ion,cii_rc_data[i].Case1, $ <span class= code-prompt >IDL&gt;</span>                           cii_rc_data[i].Wavelength, cii_rc_data[i].a, $ <span class= code-prompt >IDL&gt;</span>                           cii_rc_data[i].b, cii_rc_data[i].c, $ <span class= code-prompt >IDL&gt;</span>                           cii_rc_data[i].d, cii_rc_data[i].br, $ <span class= code-prompt >IDL&gt;</span>                           cii_rc_data[i].Q, cii_rc_data[i].y <span class= code-output >   C2+A       9903.4600      0.69700000     -0.78400000      ...</span> <span class= code-output >   C2+A       4267.1500       1.0110000     -0.75400000      ...</span> <span class= code-output >   ...</span>      type=an array of data. This function returns the effective recombination coefficients:           { Ion: ' '             Case1:''             Wavelength:0.0,             a: 0.0,             b: 0.0,             c: 0.0,             d: 0.0,             br: 0.0,             y: 0.0}   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::search_aeff_ppb91", "atomneb::search_aeff_ppb91", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::search_aeff_ppb91", "     This function searches effective recombination coefficients (Aeff) for given element      and ionic levels in the FITS data file ('rec_PPB91.fits'), and returns the data entry.   ", "atom                     atom name e.g. 'c'  ion                     ionic level e.g 'iii'   ", "Recombination Lines", "   0.2.0        15/01/2017, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atom='c' <span class= code-prompt >IDL&gt;</span> ion='iii' <span class= code-prompt >IDL&gt;</span> list_cii_aeff_data=atm-&gt;search_aeff_ppb91(atom, ion) <span class= code-prompt >IDL&gt;</span> print,list_cii_aeff_data <span class= code-output >   c_iii_aeff</span>      type=array of data. This function returns the Aeff_Data.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::list_aeff_ppb91_references", "atomneb::list_aeff_ppb91_references", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::list_aeff_ppb91_references", "     This function returns a list for all references of recombination coefficients (Aeff)      for given element and ionic level from the FITS data file ('rc_PPB91.fits').   ", "atom                     atom name e.g. 'c'  ion                     ionic level e.g 'iii'   ", "Recombination Lines", "   0.2.0        15/01/2017, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atom='c' <span class= code-prompt >IDL&gt;</span> ion='iii' <span class= code-prompt >IDL&gt;</span> list_cii_aeff_reference=atm-&gt;list_aeff_ppb91_references(atom, ion) <span class= code-prompt >IDL&gt;</span> print,list_cii_aeff_reference       type=an array of strings. This function returns the references.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::get_aeff_ppb91_reference_citation", "atomneb::get_aeff_ppb91_reference_citation", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::get_aeff_ppb91_reference_citation", "     This function returns the reference citation for a recombination coefficient (Aeff)      from the 2nd binary table extension of the FITS data file ('rc_PPB91.fits').   ", "reference                     set for the reference,  not necessary   atom                     atom name e.g. 'c'  ion                     ionic level e.g 'iii'   ", "Recombination Lines", "   0.2.0        15/01/2017, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atom='c' <span class= code-prompt >IDL&gt;</span> ion='iii' <span class= code-prompt >IDL&gt;</span> citation=atm-&gt;get_aeff_ppb91_reference_citation(atom, ion) <span class= code-prompt >IDL&gt;</span> print, citation <span class= code-output >   Pequignot, D., Petitjean, P. and Boisson, C. Astron.Astrophys., 251, 680, 1991</span>      type=string. This function returns the Citation.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::read_aeff_sh95", "atomneb::read_aeff_sh95", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::read_aeff_sh95", "     This function returns the effective recombination coefficients (Aeff) from the table extensions      of the FITS data file ('rc_SH95.fits').   ", "reference                     set for the reference,  not necessary  case1                     set for the case 'a' or 'b', defualt 'b'   atom                     atom name e.g. 'h'  ion                     ionic level e.g 'ii'   ", "Recombination Lines", "   0.2.0        15/01/2017, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atom='h' <span class= code-prompt >IDL&gt;</span> ion='ii' ; H I <span class= code-prompt >IDL&gt;</span> hi_rc_data=atm-&gt;read_aeff_sh95(atom, ion) <span class= code-prompt >IDL&gt;</span> print,hi_rc_data[0].Aeff <span class= code-output >   100.00000       500.00000       0.0000000   4.2140000e-27    1.7560000e-27  ...</span> <span class= code-output >   ...</span>      type=an array of data. This function returns the effective recombination coefficients.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::search_aeff_sh95", "atomneb::search_aeff_sh95", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::search_aeff_sh95", "     This function searches effective recombination coefficients (Aeff) for given element      and ionic levels in the FITS data file ('rec_SH95.fits'), and returns the data entry.   ", "atom                     atom name e.g. 'h'  ion                     ionic level e.g 'ii'   ", "Recombination Lines", "   0.2.0        15/01/2017, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atom='h' <span class= code-prompt >IDL&gt;</span> ion='ii' ; H I <span class= code-prompt >IDL&gt;</span> list_hi_aeff_data=atm-&gt;search_aeff_sh95(atom, ion) <span class= code-prompt >IDL&gt;</span> print,list_hi_aeff_data <span class= code-output >   h_ii_aeff_a h_ii_aeff_b</span>      type=array of data. This function returns the Aeff_Data.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::list_aeff_sh95_references", "atomneb::list_aeff_sh95_references", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::list_aeff_sh95_references", "     This function returns a list for all references of recombination coefficients (Aeff)      for given element and ionic level from the FITS data file ('rc_SH95.fits').   ", "atom                     atom name e.g. 'h'  ion                     ionic level e.g 'ii'   ", "Recombination Lines", "   0.2.0        15/01/2017, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atom='h' <span class= code-prompt >IDL&gt;</span> ion='ii' ; H I <span class= code-prompt >IDL&gt;</span> list_hi_aeff_reference=atm-&gt;list_aeff_sh95_references(atom, ion) <span class= code-prompt >IDL&gt;</span> print,list_hi_aeff_reference       type=an array of strings. This function returns the references.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::get_aeff_sh95_reference_citation", "atomneb::get_aeff_sh95_reference_citation", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::get_aeff_sh95_reference_citation", "     This function returns the reference citation for a recombination coefficient (Aeff)      from the 2nd binary table extension of the FITS data file ('rc_SH95.fits').   ", "reference                     set for the reference,  not necessary  case1                     set for the case 'a' or 'b', defualt 'b'   atom                     atom name e.g. 'h'  ion                     ionic level e.g 'ii'   ", "Recombination Lines", "   0.2.0        15/01/2017, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atom='h' <span class= code-prompt >IDL&gt;</span> ion='ii' ; H I <span class= code-prompt >IDL&gt;</span> citation=atm-&gt;get_aeff_sh95_reference_citation(atom, ion) <span class= code-prompt >IDL&gt;</span> print, citation <span class= code-output >   Storey, P. J. and Hummer, D. G., MNRAS, 272, 41S, 1995</span>      type=string. This function returns the Citation.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::read_aeff_he_i_pfsd12", "atomneb::read_aeff_he_i_pfsd12", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::read_aeff_he_i_pfsd12", "     This function returns the effective recombination coefficients (Aeff) from the table extensions      of the FITS data file ('rc_he_ii_PFSD12.fits').   ", "wavelength                     set for returning the wavelengths  reference                     set for the reference, not necessary   atom                     atom name e.g. 'he'  ion                     ionic level e.g 'ii'   ", "Recombination Lines", "   0.2.0        15/01/2017, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atom='he' <span class= code-prompt >IDL&gt;</span> ion='ii' ; He I <span class= code-prompt >IDL&gt;</span> hei_rc_data=atm-&gt;read_aeff_he_i_pfsd12(atom, ion) <span class= code-prompt >IDL&gt;</span> hei_rc_data_wave=atm-&gt;read_aeff_he_i_pfsd12(atom, ion, /wavelength) <span class= code-prompt >IDL&gt;</span> print,hei_rc_data[0].Aeff <span class= code-output >   5000.0000       10.000000      -25.379540      -25.058970      -25.948440      ...</span> <span class= code-prompt >IDL&gt;</span> temp=size(hei_rc_data_wave.Wavelength,/DIMENSIONS) <span class= code-prompt >IDL&gt;</span> n_line=temp[0] <span class= code-prompt >IDL&gt;</span> for i=0,n_line-1 do print,hei_rc_data_wave[i].Wavelength, hei_rc_data_wave[i].LowerTerm, hei_rc_data_wave[i].UpperTerm <span class= code-output >   2945.00005p^{3}P2s^{3}S</span> <span class= code-output >   3188.00004p^{3}P2s^{3}S</span> <span class= code-output >   3614.00005p^{1}P2s^{1}S</span> <span class= code-output >   ...</span>      type=an array of data. This function returns the effective recombination coefficients.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::search_aeff_he_i_pfsd12", "atomneb::search_aeff_he_i_pfsd12", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::search_aeff_he_i_pfsd12", "     This function searches effective recombination coefficients (Aeff) for given element      and ionic levels in the FITS data file ('rec_he_ii_PFSD12.fits'), and returns the data entry.   ", "atom                     atom name e.g. 'he'  ion                     ionic level e.g 'ii'   ", "Recombination Lines", "   0.2.0        15/01/2017, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atom='he' <span class= code-prompt >IDL&gt;</span> ion='ii' ; He I <span class= code-prompt >IDL&gt;</span> list_hei_aeff_data=atm-&gt;search_aeff_he_i_pfsd12(atom, ion) <span class= code-prompt >IDL&gt;</span> print,list_hei_aeff_data <span class= code-output >   he_ii_aeff_PFSD12 he_ii_aeff_PFSD13</span>      type=array of data. This function returns the Aeff_Data.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::list_aeff_he_i_pfsd12_references", "atomneb::list_aeff_he_i_pfsd12_references", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::list_aeff_he_i_pfsd12_references", "     This function returns a list for all references of recombination coefficients (Aeff)      for given element and ionic level from the FITS data file ('rc_he_ii_PFSD12.fits').   ", "atom                     atom name e.g. 'he'  ion                     ionic level e.g 'ii'   ", "Recombination Lines", "   0.2.0        15/01/2017, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atom='he' <span class= code-prompt >IDL&gt;</span> ion='ii' ; He I <span class= code-prompt >IDL&gt;</span> list_hei_aeff_reference=atm-&gt;list_aeff_he_i_pfsd12_references(atom, ion) <span class= code-prompt >IDL&gt;</span> print,list_hei_aeff_reference <span class= code-output >   PFSD12 PFSD13</span>      type=an array of strings. This function returns the references.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::get_aeff_he_i_pfsd12_reference_citation", "atomneb::get_aeff_he_i_pfsd12_reference_citation", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::get_aeff_he_i_pfsd12_reference_citation", "     This function returns the reference citation for a recombination coefficient (Aeff)      from the 2nd binary table extension of the FITS data file ('rc_he_ii_PFSD12.fits').   ", "reference                     set for the reference e.g. 'PFSD13',  may not necessary   atom                     atom name e.g. 'he'  ion                     ionic level e.g 'ii'   ", "Recombination Lines", "   0.2.0        15/01/2017, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atom='he' <span class= code-prompt >IDL&gt;</span> ion='ii' ; He I <span class= code-prompt >IDL&gt;</span> reference='PFSD13' <span class= code-prompt >IDL&gt;</span> citation=atm-&gt;get_aeff_he_i_pfsd12_reference_citation(atom, ion, reference=reference) <span class= code-prompt >IDL&gt;</span> print, citation <span class= code-output >   Porter, R. L., Ferland, G. J., Storey, P. J. and Detisch, M. J., MNRAS, 433L, 89, 2013</span>      type=string. This function returns the Citation.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::read_aeff_n_ii_fsl13", "atomneb::read_aeff_n_ii_fsl13", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::read_aeff_n_ii_fsl13", "     This function returns the effective recombination coefficients (Aeff) from the table extensions      of the FITS data file ('rc_n_iii_FSL13.fits').   ", "wavelength                     set for returning the wavelengths  reference                     set for the reference, not necessary   atom                        atom name e.g. 'n'  ion                        ionic level e.g 'iii'  wavelength_range                        wavelength range e.g. [4400.0, 7100.0]   ", "Recombination Lines", "   0.2.0        03/07/2017, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atom='n' <span class= code-prompt >IDL&gt;</span> ion='iii' ; N II <span class= code-prompt >IDL&gt;</span> wavelength_range=[4400.0, 7100.0] <span class= code-prompt >IDL&gt;</span> nii_rc_data=atm-&gt;read_aeff_n_ii_fsl13(atom, ion, wavelength_range) <span class= code-prompt >IDL&gt;</span> nii_rc_data_wave=atm-&gt;read_aeff_n_ii_fsl13(atom, ion, wavelength_range, /wavelength) <span class= code-prompt >IDL&gt;</span> print,nii_rc_data[0].Aeff <span class= code-output >   255.000      79.5000      47.3000      12.5000      ...</span> <span class= code-prompt >IDL&gt;</span> temp=size(nii_rc_data_wave.Wavelength,/DIMENSIONS) <span class= code-prompt >IDL&gt;</span> n_line=temp[0] <span class= code-prompt >IDL&gt;</span> for i=0,n_line-1 do print,nii_rc_data_wave[i].Wavelength, nii_rc_data_wave[i].Tr, nii_rc_data_wave[i].Trans <span class= code-output >   6413.236g - 4f2p6g G[9/2]o4 - 2p4f F[7/2]e3</span> <span class= code-output >   6556.326g - 4f2p6g G[9/2]o5 - 2p4f G[7/2]e4</span> <span class= code-output >   6456.976g - 4f2p6g G[9/2]o5 - 2p4f F[7/2]e4</span> <span class= code-output >   ...</span>      type=an array of data. This function returns the effective recombination coefficients.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::search_aeff_n_ii_fsl13", "atomneb::search_aeff_n_ii_fsl13", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::search_aeff_n_ii_fsl13", "     This function searches effective recombination coefficients (Aeff) for given element      and ionic levels in the FITS data file ('rc_n_iii_FSL13.fits'), and returns the data entry.   ", "atom                     atom name e.g. 'n'  ion                     ionic level e.g 'iii'   wavelength", "Recombination Lines", "   0.2.0        03/07/2017, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atom='n' <span class= code-prompt >IDL&gt;</span> ion='iii' ; N II <span class= code-prompt >IDL&gt;</span> wavelength=5679.56 <span class= code-prompt >IDL&gt;</span> list_nii_aeff_data=atm-&gt;search_aeff_n_ii_fsl13(atom, ion, wavelength) <span class= code-prompt >IDL&gt;</span> print,list_nii_aeff_data.Wavelength <span class= code-output >   5679.56</span> <span class= code-prompt >IDL&gt;</span> print,list_nii_aeff_data.Aeff <span class= code-output >   7810.00      1780.00      850.000      151.000      74.4000      53.1000      47.4000</span> <span class= code-output >   7370.00      1700.00      886.000      206.000      110.000      80.1000      70.8000</span> <span class= code-output >   7730.00      1680.00      900.000      239.000      138.000      103.000      92.9000</span> <span class= code-output >   8520.00      1710.00      905.000      244.000      142.000      107.000      97.0000</span>      type=array of data. This function returns the Aeff_Data.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::list_aeff_n_ii_fsl13_references", "atomneb::list_aeff_n_ii_fsl13_references", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::list_aeff_n_ii_fsl13_references", "     This function returns a list for all references of recombination coefficients (Aeff)      for given element and ionic level from the FITS data file ('rc_n_iii_FSL13.fits').   ", "atom                     atom name e.g. 'n'  ion                     ionic level e.g 'iii'   ", "Recombination Lines", "   0.2.0        03/07/2017, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atom='n' <span class= code-prompt >IDL&gt;</span> ion='iii' ; N II <span class= code-prompt >IDL&gt;</span> list_nii_aeff_reference=atm-&gt;list_aeff_n_ii_fsl13_references(atom, ion) <span class= code-prompt >IDL&gt;</span> print,list_nii_aeff_reference       type=an array of strings. This function returns the references.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::get_aeff_n_ii_fsl13_reference_citation", "atomneb::get_aeff_n_ii_fsl13_reference_citation", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::get_aeff_n_ii_fsl13_reference_citation", "     This function returns the reference citation for a recombination coefficient (Aeff)      from the 2nd binary table extension of the FITS data file ('rc_n_iii_FSL13.fits').   ", "reference                     set for the reference e.g. 'FSL13',  may not necessary   atom                     atom name e.g. 'n'  ion                     ionic level e.g 'iii'   ", "Recombination Lines", "   0.2.0        03/07/2017, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atom='n' <span class= code-prompt >IDL&gt;</span> ion='iii' ; N II <span class= code-prompt >IDL&gt;</span> reference='FSL13' <span class= code-prompt >IDL&gt;</span> citation=atm-&gt;get_aeff_n_ii_fsl13_reference_citation(atom, ion) <span class= code-prompt >IDL&gt;</span> print, citation <span class= code-output >   Fang X., Storey P.J., and Liu X.-W., R. 2011, Astron.Astrophys. 530, A18; 2013, Astron.Astrophys. 550, C2</span>      type=string. This function returns the Citation.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::read_aeff_o_ii_ssb17", "atomneb::read_aeff_o_ii_ssb17", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::read_aeff_o_ii_ssb17", "     This function returns the effective recombination coefficients (Aeff) from the table extensions      of the FITS data file ('rc_o_iii_SSB17.fits').   ", "wavelength                     set for returning the wavelengths  reference                     set for the reference, not necessary   atom                        atom name e.g. 'o'  ion                        ionic level e.g 'iii'  case1                        set for the case 'a' or 'b', defualt 'b'  wavelength_range                        wavelength range e.g. [5320.0, 5330.0]   ", "Recombination Lines", "   0.2.0        03/07/2017, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atom='o' <span class= code-prompt >IDL&gt;</span> ion='iii' ; O II <span class= code-prompt >IDL&gt;</span> case1='B' <span class= code-prompt >IDL&gt;</span> wavelength_range=[5320.0, 5330.0] <span class= code-prompt >IDL&gt;</span> oii_rc_data=atm-&gt;read_aeff_o_ii_ssb17(atom, ion, case1, wavelength_range) <span class= code-prompt >IDL&gt;</span> oii_rc_data_wave=atm-&gt;read_aeff_o_ii_ssb17(atom, ion, case1, wavelength_range, /wavelength) <span class= code-prompt >IDL&gt;</span> print,oii_rc_data[0].Aeff <span class= code-output >   1.64100e-30  1.60000e-30  1.56400e-30  1.54100e-30 ...</span> <span class= code-prompt >IDL&gt;</span> temp=size(oii_rc_data_wave.Wavelength,/DIMENSIONS) <span class= code-prompt >IDL&gt;</span> n_line=temp[0] <span class= code-prompt >IDL&gt;</span> for i=0,n_line-1 do print,oii_rc_data_wave[i].Wavelength, oii_rc_data_wave[i].lower_term, oii_rc_data_wave[i].upper_term <span class= code-output >   5327.172s22p2(1S)3p 2Po</span> <span class= code-output >   5325.422s22p2(1S)3p 2Po</span> <span class= code-output >   5327.182s22p2(1D)3d 2Ge</span> <span class= code-output >   ...</span>      type=an array of data. This function returns the effective recombination coefficients.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::search_aeff_o_ii_ssb17", "atomneb::search_aeff_o_ii_ssb17", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::search_aeff_o_ii_ssb17", "     This function searches effective recombination coefficients (Aeff) for given element      and ionic levels in the FITS data file ('rc_o_iii_SSB17.fits'), and returns the data entry.   ", "atom                     atom name e.g. 'o'  ion                     ionic level e.g 'iii'  case1                        set for the case 'a' or 'b', defualt 'b'  wavelength                     set the wavelengths   ", "Recombination Lines", "   0.2.0        03/07/2017, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atom='o' <span class= code-prompt >IDL&gt;</span> ion='iii' ; O II <span class= code-prompt >IDL&gt;</span> case1='B' <span class= code-prompt >IDL&gt;</span> wavelength=5325.42 <span class= code-prompt >IDL&gt;</span> list_oii_aeff_data=atm-&gt;search_aeff_o_ii_ssb17(atom, ion, case1, wavelength) <span class= code-prompt >IDL&gt;</span> print,list_oii_aeff_data.Wavelength <span class= code-output >   5325.42</span> <span class= code-prompt >IDL&gt;</span> print,list_oii_aeff_data.Aeff <span class= code-output >   3.41800e-32  3.33300e-32  3.25700e-32  3.20900e-32  3.16800e-32 ...</span>      type=array of data. This function returns the Aeff_Data.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::list_aeff_o_ii_ssb17_references", "atomneb::list_aeff_o_ii_ssb17_references", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::list_aeff_o_ii_ssb17_references", "     This function returns a list for all references of recombination coefficients (Aeff)      for given element and ionic level from the FITS data file ('rc_o_iii_SSB17.fits').   ", "atom                     atom name e.g. 'o'  ion                     ionic level e.g 'iii'   ", "Recombination Lines", "   0.2.0        03/07/2017, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atom='o' <span class= code-prompt >IDL&gt;</span> ion='iii' ; O II <span class= code-prompt >IDL&gt;</span> list_oii_aeff_reference=atm-&gt;list_aeff_o_ii_ssb17_references(atom, ion) <span class= code-prompt >IDL&gt;</span> print,list_oii_aeff_reference       type=an array of strings. This function returns the references.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::get_aeff_o_ii_ssb17_reference_citation", "atomneb::get_aeff_o_ii_ssb17_reference_citation", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "   Ashkbiz Danehkar   ", "atomneb::get_aeff_o_ii_ssb17_reference_citation", "     This function returns the reference citation for a recombination coefficient (Aeff)      from the 2nd binary table extension of the FITS data file ('rc_o_iii_SSB17.fits').   ", "reference                     set for the reference e.g. 'SSB17',  may not necessary   atom                     atom name e.g. 'o'  ion                     ionic level e.g 'iii'   ", "Recombination Lines", "   0.2.0        03/07/2017, IDL code by A. Danehkar       12/05/2020, A. Danehkar, Move to object-oriented programming (OOP).     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> atm=obj_new('atomneb') <span class= code-prompt >IDL&gt;</span> atom='o' <span class= code-prompt >IDL&gt;</span> ion='iii' ; O II <span class= code-prompt >IDL&gt;</span> reference='SSB17' <span class= code-prompt >IDL&gt;</span> citation=atm-&gt;get_aeff_o_ii_ssb17_reference_citation(atom, ion) <span class= code-prompt >IDL&gt;</span> print, citation <span class= code-output >   Storey, P.J., Sochi, T. and Bastin, R. 2017, MNRAS, 470, 379; VizieR On-line Data Catalog: VI/150</span>      type=string. This function returns the Citation.   ");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::set_data_dir", "atomneb::set_data_dir", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::set_data_dir", "", "data_dir", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::get_data_dir", "atomneb::get_data_dir", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::get_data_dir", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::set_base_dir", "atomneb::set_base_dir", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::set_base_dir", "", "base_dir", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::get_base_dir", "atomneb::get_base_dir", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::get_base_dir", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::set_data_cel_dir", "atomneb::set_data_cel_dir", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::set_data_cel_dir", "", "data_cel_dir", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::get_data_cel_dir", "atomneb::get_data_cel_dir", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::get_data_cel_dir", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::set_data_cel", "atomneb::set_data_cel", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::set_data_cel", "", "data_cel", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::get_data_cel", "atomneb::get_data_cel", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::get_data_cel", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::set_data_rc_dir", "atomneb::set_data_rc_dir", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::set_data_rc_dir", "", "data_rc_dir", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::get_data_rc_dir", "atomneb::get_data_rc_dir", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::get_data_rc_dir", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::set_Atom_Elj_file", "atomneb::set_Atom_Elj_file", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::set_Atom_Elj_file", "", "Atom_Elj_file", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::get_Atom_Elj_file", "atomneb::get_Atom_Elj_file", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::get_Atom_Elj_file", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::set_Atom_Omij_file", "atomneb::set_Atom_Omij_file", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::set_Atom_Omij_file", "", "Atom_Omij_file", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::get_Atom_Omij_file", "atomneb::get_Atom_Omij_file", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::get_Atom_Omij_file", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::set_Atom_Aij_file", "atomneb::set_Atom_Aij_file", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::set_Atom_Aij_file", "", "Atom_Aij_file", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::get_Atom_Aij_file", "atomneb::get_Atom_Aij_file", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::get_Atom_Aij_file", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::set_Atom_RC_Collection_file", "atomneb::set_Atom_RC_Collection_file", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::set_Atom_RC_Collection_file", "", "Atom_RC_Collection_file", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::get_Atom_RC_Collection_file", "atomneb::get_Atom_RC_Collection_file", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::get_Atom_RC_Collection_file", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::set_Atom_RC_PPB91_file", "atomneb::set_Atom_RC_PPB91_file", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::set_Atom_RC_PPB91_file", "", "Atom_RC_PPB91_file", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::get_Atom_RC_PPB91_file", "atomneb::get_Atom_RC_PPB91_file", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::get_Atom_RC_PPB91_file", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::set_Atom_RC_SH95_file", "atomneb::set_Atom_RC_SH95_file", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::set_Atom_RC_SH95_file", "", "Atom_RC_SH95_file", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::get_Atom_RC_SH95_file", "atomneb::get_Atom_RC_SH95_file", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::get_Atom_RC_SH95_file", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::set_Atom_RC_PFSD12_file", "atomneb::set_Atom_RC_PFSD12_file", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::set_Atom_RC_PFSD12_file", "", "Atom_RC_PFSD12_file", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::get_Atom_RC_PFSD12_file", "atomneb::get_Atom_RC_PFSD12_file", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::get_Atom_RC_PFSD12_file", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::set_Atom_RC_N_III_FSL13_file", "atomneb::set_Atom_RC_N_III_FSL13_file", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::set_Atom_RC_N_III_FSL13_file", "", "Atom_RC_N_III_FSL13_file", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::get_Atom_RC_N_III_FSL13_file", "atomneb::get_Atom_RC_N_III_FSL13_file", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::get_Atom_RC_N_III_FSL13_file", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::set_Atom_RC_O_III_SSB17_file", "atomneb::set_Atom_RC_O_III_SSB17_file", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::set_Atom_RC_O_III_SSB17_file", "", "full_dataAtom_RC_O_III_SSB17_file", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::set_Atom_RC_O_III_SSB17", "atomneb::set_Atom_RC_O_III_SSB17", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::set_Atom_RC_O_III_SSB17", "", "full_data", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb::get_Atom_RC_O_III_SSB17_file", "atomneb::get_Atom_RC_O_III_SSB17_file", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb::get_Atom_RC_O_III_SSB17_file", "", "", "          -1", "");
  
  libdata[libdataItem++] = new Array("./atomneb__define.html#atomneb__define", "atomneb__define", 'routine in <a href="./atomneb__define.html">atomneb__define.pro</a>', "atomneb__define.pro", "", "atomneb__define", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("./atomneb_get_aeff_collection_reference_citation.html", "atomneb_get_aeff_collection_reference_citation.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_get_aeff_collection_reference_citation.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_get_aeff_collection_reference_citation.html#atomneb_get_aeff_collection_reference_citation", "atomneb_get_aeff_collection_reference_citation", 'routine in <a href="./atomneb_get_aeff_collection_reference_citation.html">atomneb_get_aeff_collection_reference_citation.pro</a>', "atomneb_get_aeff_collection_reference_citation.pro", "   Ashkbiz Danehkar   ", "atomneb_get_aeff_collection_reference_citation", "     This function returns the reference citation for a recombination coefficient (Aeff)      from the 2nd binary table extension of the FITS data file ('rc_collection.fits').   ", "br                     set for the branching ratios (Br), may not necessary  reference                     set for the reference, not necessary   Atom_RC_file                     the FITS data file name ('rc_collection.fits')  atom                     atom name e.g. 'c'  ion                     ionic level e.g 'iii'   ", "Recombination Lines", "   0.0.1        15/01/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_rc_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_file= filepath('rc_collection.fits', root_dir=base_dir, subdir=data_rc_dir ) <span class= code-prompt >IDL&gt;</span> atom='c' <span class= code-prompt >IDL&gt;</span> ion='iii' ; C III <span class= code-prompt >IDL&gt;</span> citation=atomneb_get_aeff_collection_reference_citation(Atom_RC_file, atom, ion) <span class= code-prompt >IDL&gt;</span> print, citation <span class= code-output >   Davey, A. R., Storey, P. J. and Kisielius, R., Astron.Astrophys.Suppl., 142, 85, 2000</span>      type=string. This function returns the Citation.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_get_aeff_he_i_pfsd12_reference_citation.html", "atomneb_get_aeff_he_i_pfsd12_reference_citation.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_get_aeff_he_i_pfsd12_reference_citation.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_get_aeff_he_i_pfsd12_reference_citation.html#atomneb_get_aeff_he_i_pfsd12_reference_citation", "atomneb_get_aeff_he_i_pfsd12_reference_citation", 'routine in <a href="./atomneb_get_aeff_he_i_pfsd12_reference_citation.html">atomneb_get_aeff_he_i_pfsd12_reference_citation.pro</a>', "atomneb_get_aeff_he_i_pfsd12_reference_citation.pro", "   Ashkbiz Danehkar   ", "atomneb_get_aeff_he_i_pfsd12_reference_citation", "     This function returns the reference citation for a recombination coefficient (Aeff)      from the 2nd binary table extension of the FITS data file ('rc_he_ii_PFSD12.fits').   ", "reference                     set for the reference e.g. 'PFSD13',  may not necessary   Atom_RC_file                     the FITS data file name ('rc_he_ii_PFSD12.fits')  atom                     atom name e.g. 'he'  ion                     ionic level e.g 'ii'   ", "Recombination Lines", "   0.0.1        15/01/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_file= filepath('rc_he_ii_PFSD12.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> atom='he' <span class= code-prompt >IDL&gt;</span> ion='ii' ; He I <span class= code-prompt >IDL&gt;</span> reference='PFSD13' <span class= code-prompt >IDL&gt;</span> citation=atomneb_get_aeff_he_i_pfsd12_reference_citation(Atom_RC_file, atom, ion, reference=reference) <span class= code-prompt >IDL&gt;</span> print, citation <span class= code-output >   Porter, R. L., Ferland, G. J., Storey, P. J. and Detisch, M. J., MNRAS, 433L, 89, 2013</span>      type=string. This function returns the Citation.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_get_aeff_n_ii_fsl13_reference_citation.html", "atomneb_get_aeff_n_ii_fsl13_reference_citation.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_get_aeff_n_ii_fsl13_reference_citation.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_get_aeff_n_ii_fsl13_reference_citation.html#atomneb_get_aeff_n_ii_fsl13_reference_citation", "atomneb_get_aeff_n_ii_fsl13_reference_citation", 'routine in <a href="./atomneb_get_aeff_n_ii_fsl13_reference_citation.html">atomneb_get_aeff_n_ii_fsl13_reference_citation.pro</a>', "atomneb_get_aeff_n_ii_fsl13_reference_citation.pro", "   Ashkbiz Danehkar   ", "atomneb_get_aeff_n_ii_fsl13_reference_citation", "     This function returns the reference citation for a recombination coefficient (Aeff)      from the 2nd binary table extension of the FITS data file ('rc_n_iii_FSL13.fits').   ", "reference                     set for the reference e.g. 'FSL13',  may not necessary   Atom_RC_file                     the FITS data file name ('rc_n_iii_FSL13.fits')  atom                     atom name e.g. 'n'  ion                     ionic level e.g 'iii'   ", "Recombination Lines", "   0.0.1        03/07/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_file= filepath('rc_n_iii_FSL13.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> atom='n' <span class= code-prompt >IDL&gt;</span> ion='iii' ; N II <span class= code-prompt >IDL&gt;</span> reference='FSL13' <span class= code-prompt >IDL&gt;</span> citation=atomneb_get_aeff_n_ii_fsl13_reference_citation(Atom_RC_file, atom, ion) <span class= code-prompt >IDL&gt;</span> print, citation <span class= code-output >   Fang X., Storey P.J., and Liu X.-W., R. 2011, Astron.Astrophys. 530, A18; 2013, Astron.Astrophys. 550, C2</span>      type=string. This function returns the Citation.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_get_aeff_o_ii_ssb17_reference_citation.html", "atomneb_get_aeff_o_ii_ssb17_reference_citation.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_get_aeff_o_ii_ssb17_reference_citation.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_get_aeff_o_ii_ssb17_reference_citation.html#atomneb_get_aeff_o_ii_ssb17_reference_citation", "atomneb_get_aeff_o_ii_ssb17_reference_citation", 'routine in <a href="./atomneb_get_aeff_o_ii_ssb17_reference_citation.html">atomneb_get_aeff_o_ii_ssb17_reference_citation.pro</a>', "atomneb_get_aeff_o_ii_ssb17_reference_citation.pro", "   Ashkbiz Danehkar   ", "atomneb_get_aeff_o_ii_ssb17_reference_citation", "     This function returns the reference citation for a recombination coefficient (Aeff)      from the 2nd binary table extension of the FITS data file ('rc_o_iii_SSB17.fits').   ", "reference                     set for the reference e.g. 'SSB17',  may not necessary   Atom_RC_file                     the FITS data file name ('rc_o_iii_SSB17.fits')  atom                     atom name e.g. 'o'  ion                     ionic level e.g 'iii'   ", "Recombination Lines", "   0.0.1        03/07/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_file= filepath('rc_o_iii_SSB17.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> atom='o' <span class= code-prompt >IDL&gt;</span> ion='iii' ; O II <span class= code-prompt >IDL&gt;</span> reference='SSB17' <span class= code-prompt >IDL&gt;</span> citation=atomneb_get_aeff_o_ii_ssb17_reference_citation(Atom_RC_file, atom, ion) <span class= code-prompt >IDL&gt;</span> print, citation <span class= code-output >   Storey, P.J., Sochi, T. and Bastin, R. 2017, MNRAS, 470, 379; VizieR On-line Data Catalog: VI/150</span>      type=string. This function returns the Citation.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_get_aeff_ppb91_reference_citation.html", "atomneb_get_aeff_ppb91_reference_citation.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_get_aeff_ppb91_reference_citation.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_get_aeff_ppb91_reference_citation.html#atomneb_get_aeff_ppb91_reference_citation", "atomneb_get_aeff_ppb91_reference_citation", 'routine in <a href="./atomneb_get_aeff_ppb91_reference_citation.html">atomneb_get_aeff_ppb91_reference_citation.pro</a>', "atomneb_get_aeff_ppb91_reference_citation.pro", "   Ashkbiz Danehkar   ", "atomneb_get_aeff_ppb91_reference_citation", "     This function returns the reference citation for a recombination coefficient (Aeff)      from the 2nd binary table extension of the FITS data file ('rc_PPB91.fits').   ", "reference                     set for the reference,  not necessary   Atom_RC_file                     the FITS data file name ('rc_PPB91.fits')  atom                     atom name e.g. 'c'  ion                     ionic level e.g 'iii'   ", "Recombination Lines", "   0.0.1        15/01/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_file= filepath('rc_PPB91.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> atom='c' <span class= code-prompt >IDL&gt;</span> ion='iii' <span class= code-prompt >IDL&gt;</span> citation=atomneb_get_aeff_ppb91_reference_citation(Atom_RC_file, atom, ion) <span class= code-prompt >IDL&gt;</span> print, citation <span class= code-output >   Pequignot, D., Petitjean, P. and Boisson, C. Astron.Astrophys., 251, 680, 1991</span>      type=string. This function returns the Citation.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_get_aeff_sh95_reference_citation.html", "atomneb_get_aeff_sh95_reference_citation.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_get_aeff_sh95_reference_citation.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_get_aeff_sh95_reference_citation.html#atomneb_get_aeff_sh95_reference_citation", "atomneb_get_aeff_sh95_reference_citation", 'routine in <a href="./atomneb_get_aeff_sh95_reference_citation.html">atomneb_get_aeff_sh95_reference_citation.pro</a>', "atomneb_get_aeff_sh95_reference_citation.pro", "   Ashkbiz Danehkar   ", "atomneb_get_aeff_sh95_reference_citation", "     This function returns the reference citation for a recombination coefficient (Aeff)      from the 2nd binary table extension of the FITS data file ('rc_SH95.fits').   ", "reference                     set for the reference,  not necessary  case1                     set for the case 'a' or 'b', defualt 'b'   Atom_RC_file                     the FITS data file name ('rc_SH95.fits')  atom                     atom name e.g. 'h'  ion                     ionic level e.g 'ii'   ", "Recombination Lines", "   0.0.1        15/01/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_file= filepath('rc_SH95.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> atom='h' <span class= code-prompt >IDL&gt;</span> ion='ii' ; H I <span class= code-prompt >IDL&gt;</span> citation=atomneb_get_aeff_sh95_reference_citation(Atom_RC_file, atom, ion) <span class= code-prompt >IDL&gt;</span> print, citation <span class= code-output >   Storey, P. J. and Hummer, D. G., MNRAS, 272, 41S, 1995</span>      type=string. This function returns the Citation.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_get_aij_reference_citation.html", "atomneb_get_aij_reference_citation.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_get_aij_reference_citation.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_get_aij_reference_citation.html#atomneb_get_aij_reference_citation", "atomneb_get_aij_reference_citation", 'routine in <a href="./atomneb_get_aij_reference_citation.html">atomneb_get_aij_reference_citation.pro</a>', "atomneb_get_aij_reference_citation.pro", "   Ashkbiz Danehkar   ", "atomneb_get_aij_reference_citation", "     This function returns the reference citation for a transition probability (Aij)      from the 2nd binary table extension of the FITS data file ('AtoAij.fits')   ", "Atom_Aij_file                     the FITS data file name ('AtoAij.fits')  atom                     atom name e.g. 'o'  ion                     ionic level e.g 'iii'  reference                     set for the reference e.g. 'FFT04'   ", "Collisionally Excited Lines", "   0.0.1        24/12/2015, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_dir = ['atomic-data', 'collection'] <span class= code-prompt >IDL&gt;</span> Atom_Aij_file = filepath('AtomAij.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> atom='o' <span class= code-prompt >IDL&gt;</span> ion='iii' <span class= code-prompt >IDL&gt;</span> reference='FFT04' <span class= code-prompt >IDL&gt;</span> citation=atomneb_get_aij_reference_citation(Atom_Aij_file, atom, ion, reference) <span class= code-prompt >IDL&gt;</span> print,citation <span class= code-output >   Froese Fischer et al 2004, ADNDT 87, 1</span>      type=string. This function returns the Citation.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_get_elj_reference_citation.html", "atomneb_get_elj_reference_citation.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_get_elj_reference_citation.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_get_elj_reference_citation.html#atomneb_get_elj_reference_citation", "atomneb_get_elj_reference_citation", 'routine in <a href="./atomneb_get_elj_reference_citation.html">atomneb_get_elj_reference_citation.pro</a>', "atomneb_get_elj_reference_citation.pro", "   Ashkbiz Danehkar   ", "atomneb_get_elj_reference_citation", "     This function returns the reference citation for energy levels (Ej)      from the 2nd binary table extension of the FITS data file ('AtomElj.fits').   ", "Atom_Elj_file                     the FITS data file name ('AtomElj.fits')  reference                     set for the reference e.g. 'L7288'   ", "Collisionally Excited Lines", "   0.0.1        24/12/2015, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_dir = ['atomic-data', 'collection'] <span class= code-prompt >IDL&gt;</span> Atom_Elj_file = filepath('AtomElj.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> reference='L7288' <span class= code-prompt >IDL&gt;</span> citation=atomneb_get_elj_reference_citation(Atom_Elj_file, reference) <span class= code-prompt >IDL&gt;</span> print,citation <span class= code-output >   C. E. Moore, in CRC Series in Evaluated Data in Atomic Physics, 339 pp. (CRC Press, Boca Raton, FL, 1993)</span>      type=string. This function returns the Citation.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_get_omij_reference_citation.html", "atomneb_get_omij_reference_citation.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_get_omij_reference_citation.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_get_omij_reference_citation.html#atomneb_get_omij_reference_citation", "atomneb_get_omij_reference_citation", 'routine in <a href="./atomneb_get_omij_reference_citation.html">atomneb_get_omij_reference_citation.pro</a>', "atomneb_get_omij_reference_citation.pro", "   Ashkbiz Danehkar   ", "atomneb_get_omij_reference_citation", "     This function returns the reference citation for collision strengths (Omega_ij)      from the 2nd binary table extension of the FITS data file ('AtomOmij.fits').   ", "Atom_Omij_file                     the FITS data file name ('AtomOmij.fits')  atom                     atom name e.g. 'o'  ion                     ionic level e.g 'iii'  reference                     set for the reference e.g. 'SSB14'   ", "Collisionally Excited Lines", "   0.0.1        24/12/2015, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_dir = ['atomic-data', 'collection'] <span class= code-prompt >IDL&gt;</span> Atom_Omij_file = filepath('AtomOmij.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> atom='o' <span class= code-prompt >IDL&gt;</span> ion='iii' <span class= code-prompt >IDL&gt;</span> reference='SSB14' <span class= code-prompt >IDL&gt;</span> citation=atomneb_get_omij_reference_citation(Atom_Omij_file, atom, ion, reference) <span class= code-prompt >IDL&gt;</span> print,citation <span class= code-output >   Storey, P. J., Sochi, T., and Badnell, N. R. 2014, Astron.Astrophys., 441, 3028</span>      type=string. This function returns the Citation.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_list_aeff_collection_references.html", "atomneb_list_aeff_collection_references.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_list_aeff_collection_references.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_list_aeff_collection_references.html#atomneb_list_aeff_collection_references", "atomneb_list_aeff_collection_references", 'routine in <a href="./atomneb_list_aeff_collection_references.html">atomneb_list_aeff_collection_references.pro</a>', "atomneb_list_aeff_collection_references.pro", "   Ashkbiz Danehkar   ", "atomneb_list_aeff_collection_references", "     This function returns a list for all references of recombination coefficients (Aeff)      for given element and ionic level from the FITS data file ('rc_collection.fits').   ", "br                     set for the branching ratios (Br), may not necessary   Atom_RC_file                     the FITS data file name ('rc_collection.fits')  atom                     atom name e.g. 'c'  ion                     ionic level e.g 'iii'   ", "Recombination Lines", "   0.0.1        15/01/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_rc_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_file= filepath('rc_collection.fits', root_dir=base_dir, subdir=data_rc_dir ) <span class= code-prompt >IDL&gt;</span> atom='c' <span class= code-prompt >IDL&gt;</span> ion='iii' ; C III <span class= code-prompt >IDL&gt;</span> list_cii_aeff_reference=atomneb_list_aeff_collection_references(Atom_RC_file, atom, ion) <span class= code-prompt >IDL&gt;</span> print,list_cii_aeff_reference       type=an array of strings. This function returns the references.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_list_aeff_he_i_pfsd12_references.html", "atomneb_list_aeff_he_i_pfsd12_references.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_list_aeff_he_i_pfsd12_references.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_list_aeff_he_i_pfsd12_references.html#atomneb_list_aeff_he_i_pfsd12_references", "atomneb_list_aeff_he_i_pfsd12_references", 'routine in <a href="./atomneb_list_aeff_he_i_pfsd12_references.html">atomneb_list_aeff_he_i_pfsd12_references.pro</a>', "atomneb_list_aeff_he_i_pfsd12_references.pro", "   Ashkbiz Danehkar   ", "atomneb_list_aeff_he_i_pfsd12_references", "     This function returns a list for all references of recombination coefficients (Aeff)      for given element and ionic level from the FITS data file ('rc_he_ii_PFSD12.fits').   ", "Atom_RC_file                     the FITS data file name ('rc_he_ii_PFSD12.fits')  atom                     atom name e.g. 'he'  ion                     ionic level e.g 'ii'   ", "Recombination Lines", "   0.0.1        15/01/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_file= filepath('rc_he_ii_PFSD12.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> atom='he' <span class= code-prompt >IDL&gt;</span> ion='ii' ; He I <span class= code-prompt >IDL&gt;</span> list_hei_aeff_reference=atomneb_list_aeff_he_i_pfsd12_references(Atom_RC_file, atom, ion) <span class= code-prompt >IDL&gt;</span> print,list_hei_aeff_reference <span class= code-output >   PFSD12 PFSD13</span>      type=an array of strings. This function returns the references.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_list_aeff_n_ii_fsl13_references.html", "atomneb_list_aeff_n_ii_fsl13_references.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_list_aeff_n_ii_fsl13_references.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_list_aeff_n_ii_fsl13_references.html#atomneb_list_aeff_n_ii_fsl13_references", "atomneb_list_aeff_n_ii_fsl13_references", 'routine in <a href="./atomneb_list_aeff_n_ii_fsl13_references.html">atomneb_list_aeff_n_ii_fsl13_references.pro</a>', "atomneb_list_aeff_n_ii_fsl13_references.pro", "   Ashkbiz Danehkar   ", "atomneb_list_aeff_n_ii_fsl13_references", "     This function returns a list for all references of recombination coefficients (Aeff)      for given element and ionic level from the FITS data file ('rc_n_iii_FSL13.fits').   ", "Atom_RC_file                     the FITS data file name ('rc_n_iii_FSL13.fits')  atom                     atom name e.g. 'n'  ion                     ionic level e.g 'iii'   ", "Recombination Lines", "   0.0.1        03/07/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_file= filepath('rc_n_iii_FSL13.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> atom='n' <span class= code-prompt >IDL&gt;</span> ion='iii' ; N II <span class= code-prompt >IDL&gt;</span> list_nii_aeff_reference=atomneb_list_aeff_n_ii_fsl13_references(Atom_RC_file, atom, ion) <span class= code-prompt >IDL&gt;</span> print,list_nii_aeff_reference       type=an array of strings. This function returns the references.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_list_aeff_o_ii_ssb17_references.html", "atomneb_list_aeff_o_ii_ssb17_references.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_list_aeff_o_ii_ssb17_references.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_list_aeff_o_ii_ssb17_references.html#atomneb_list_aeff_o_ii_ssb17_references", "atomneb_list_aeff_o_ii_ssb17_references", 'routine in <a href="./atomneb_list_aeff_o_ii_ssb17_references.html">atomneb_list_aeff_o_ii_ssb17_references.pro</a>', "atomneb_list_aeff_o_ii_ssb17_references.pro", "   Ashkbiz Danehkar   ", "atomneb_list_aeff_o_ii_ssb17_references", "     This function returns a list for all references of recombination coefficients (Aeff)      for given element and ionic level from the FITS data file ('rc_o_iii_SSB17.fits').   ", "Atom_RC_file                     the FITS data file name ('rc_o_iii_SSB17.fits')  atom                     atom name e.g. 'o'  ion                     ionic level e.g 'iii'   ", "Recombination Lines", "   0.0.1        03/07/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_file= filepath('rc_o_iii_SSB17.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> atom='o' <span class= code-prompt >IDL&gt;</span> ion='iii' ; O II <span class= code-prompt >IDL&gt;</span> list_oii_aeff_reference=atomneb_list_aeff_o_ii_ssb17_references(Atom_RC_file, atom, ion) <span class= code-prompt >IDL&gt;</span> print,list_oii_aeff_reference       type=an array of strings. This function returns the references.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_list_aeff_ppb91_references.html", "atomneb_list_aeff_ppb91_references.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_list_aeff_ppb91_references.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_list_aeff_ppb91_references.html#atomneb_list_aeff_ppb91_references", "atomneb_list_aeff_ppb91_references", 'routine in <a href="./atomneb_list_aeff_ppb91_references.html">atomneb_list_aeff_ppb91_references.pro</a>', "atomneb_list_aeff_ppb91_references.pro", "   Ashkbiz Danehkar   ", "atomneb_list_aeff_ppb91_references", "     This function returns a list for all references of recombination coefficients (Aeff)      for given element and ionic level from the FITS data file ('rc_PPB91.fits').   ", "Atom_RC_file                     the FITS data file name ('rc_PPB91.fits')  atom                     atom name e.g. 'c'  ion                     ionic level e.g 'iii'   ", "Recombination Lines", "   0.0.1        15/01/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_file= filepath('rc_PPB91.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> atom='c' <span class= code-prompt >IDL&gt;</span> ion='iii' <span class= code-prompt >IDL&gt;</span> list_cii_aeff_reference=atomneb_list_aeff_ppb91_references(Atom_RC_file, atom, ion) <span class= code-prompt >IDL&gt;</span> print,list_cii_aeff_reference       type=an array of strings. This function returns the references.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_list_aeff_sh95_references.html", "atomneb_list_aeff_sh95_references.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_list_aeff_sh95_references.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_list_aeff_sh95_references.html#atomneb_list_aeff_sh95_references", "atomneb_list_aeff_sh95_references", 'routine in <a href="./atomneb_list_aeff_sh95_references.html">atomneb_list_aeff_sh95_references.pro</a>', "atomneb_list_aeff_sh95_references.pro", "   Ashkbiz Danehkar   ", "atomneb_list_aeff_sh95_references", "     This function returns a list for all references of recombination coefficients (Aeff)      for given element and ionic level from the FITS data file ('rc_SH95.fits').   ", "Atom_RC_file                     the FITS data file name ('rc_SH95.fits')  atom                     atom name e.g. 'h'  ion                     ionic level e.g 'ii'   ", "Recombination Lines", "   0.0.1        15/01/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_file= filepath('rc_SH95.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> atom='h' <span class= code-prompt >IDL&gt;</span> ion='ii' ; H I <span class= code-prompt >IDL&gt;</span> list_hi_aeff_reference=atomneb_list_aeff_sh95_references(Atom_RC_file, atom, ion) <span class= code-prompt >IDL&gt;</span> print,list_hi_aeff_reference       type=an array of strings. This function returns the references.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_list_aij_references.html", "atomneb_list_aij_references.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_list_aij_references.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_list_aij_references.html#atomneb_list_aij_references", "atomneb_list_aij_references", 'routine in <a href="./atomneb_list_aij_references.html">atomneb_list_aij_references.pro</a>', "atomneb_list_aij_references.pro", "   Ashkbiz Danehkar   ", "atomneb_list_aij_references", "     This function returns a list for all references of transition probabilities (Aij)      for given element and ionic level from the FITS data file ('AtoAij.fits').   ", "Atom_Aij_fileatom                     atom name e.g. 'o'  ion                     ionic level e.g 'iii'   ", "Collisionally Excited Lines", "   0.0.1        15/01/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_dir = ['atomic-data', 'collection'] <span class= code-prompt >IDL&gt;</span> Atom_Aij_file = filepath('AtomAij.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> atom='o' <span class= code-prompt >IDL&gt;</span> ion='iii' <span class= code-prompt >IDL&gt;</span> list_oiii_aij_reference=atomneb_list_aij_references(Atom_Aij_file, atom, ion) <span class= code-prompt >IDL&gt;</span> print,list_oiii_aij_reference <span class= code-output >   FFT04-SZ00 FFT04 GMZ97-WFD96 SZ00-WFD96</span>      type=an array of strings. This function returns the references.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_list_omij_references.html", "atomneb_list_omij_references.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_list_omij_references.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_list_omij_references.html#atomneb_list_omij_references", "atomneb_list_omij_references", 'routine in <a href="./atomneb_list_omij_references.html">atomneb_list_omij_references.pro</a>', "atomneb_list_omij_references.pro", "   Ashkbiz Danehkar   ", "atomneb_list_omij_references", "     This function returns a list for all references of collision strengths (Omega_ij)      for given element and ionic level from the FITS data file ('AtomOmij.fits').   ", "Atom_Omij_file                     the FITS data file name ('AtomOmij.fits')  atom                     atom name e.g. 'o'  ion                     ionic level e.g 'iii'   ", "Collisionally Excited Lines", "   0.0.1        15/01/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_dir = ['atomic-data', 'collection'] <span class= code-prompt >IDL&gt;</span> Atom_Omij_file = filepath('AtomOmij.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> atom='o' <span class= code-prompt >IDL&gt;</span> ion='iii' <span class= code-prompt >IDL&gt;</span> list_oiii_omij_reference=atomneb_list_omij_references(Atom_Omij_file, atom, ion) <span class= code-prompt >IDL&gt;</span> print,list_oiii_omij_reference <span class= code-output >   AK99 LB94 Pal12-AK99 SSB14</span>      type=an array of strings. This function returns the references.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_read_aeff_collection.html", "atomneb_read_aeff_collection.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_read_aeff_collection.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_read_aeff_collection.html#atomneb_read_aeff_collection", "atomneb_read_aeff_collection", 'routine in <a href="./atomneb_read_aeff_collection.html">atomneb_read_aeff_collection.pro</a>', "atomneb_read_aeff_collection.pro", "   Ashkbiz Danehkar   ", "atomneb_read_aeff_collection", "     This function returns the effective recombination coefficients (Aeff) from the table extensions      of the FITS data file ('rc_collection.fits').   ", "br                     set for the branching ratios (Br), may not necessary  reference                     set for the reference, not necessary   Atom_RC_file                     the FITS data file name ('rc_collection.fits')  atom                     atom name e.g. 'c'  ion                     ionic level e.g 'iii'   ", "Recombination Lines", "   0.0.1        15/01/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_rc_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_file= filepath('rc_collection.fits', root_dir=base_dir, subdir=data_rc_dir ) <span class= code-prompt >IDL&gt;</span> atom='c' <span class= code-prompt >IDL&gt;</span> ion='iii' ; C III <span class= code-prompt >IDL&gt;</span> cii_rc_data=atomneb_read_aeff_collection(Atom_RC_file, atom, ion) <span class= code-prompt >IDL&gt;</span> temp=size(cii_rc_data.Wavelength,/DIMENSIONS) <span class= code-prompt >IDL&gt;</span> n_line=temp[0] <span class= code-prompt >IDL&gt;</span> for i=0,n_line-1 do print,cii_rc_data[i].Wavelength, cii_rc_data[i].a, $ <span class= code-prompt >IDL&gt;</span>                           cii_rc_data[i].b, cii_rc_data[i].c, $ <span class= code-prompt >IDL&gt;</span>                           cii_rc_data[i].d, cii_rc_data[i].f <span class= code-output >   914.00000      0.69280000     0.021400000    -0.016300000     -0.24310000     -0.88000000</span> <span class= code-output >   962.00000       1.0998000   -0.0042000000    -0.027900000     -0.22940000     -0.96560000</span> <span class= code-output >   ...</span>      type=an array of data. This function returns the effective recombination coefficients.            aeff_data (c_iii_aeff)            { Wavelength:0.0,              a: 0.0,              b: 0.0,              c: 0.0,              d: 0.0,              f: 0.0}             aeff_data (n_iii_aeff)            { a: 0.0,              b: 0.0,              c: 0.0}             aeff_data (n_iii_br)            {Wavelength: 0.0,             BR: 0.0, $             g1:0,             g2:0,             Mult1:'',             LowerTerm:'',             UpperTerm:'' }             aeff_data (o_iii_aeff)            {Term: '',             Case1: '',             a2: 0.0,             a4: 0.0,             a5: 0.0,             a6: 0.0,             b: 0.0,             c: 0.0,             d: 0.0}             aeff_data (o_iii_br)            {Wavelength:double(0.0),             Br_A: 0.0,             Br_B: 0.0,             Br_C: 0.0,             g1: 0,             g2: 0,             Mult1: '',             LowerTerm: '',             UpperTerm: ''}              aeff_data (ne_iii_aeff)             {Wavelength:0.0,              a: 0.0,              b: 0.0,              c: 0.0,              d: 0.0,              f: 0.0,              br: 0.0}   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_read_aeff_collection_list.html", "atomneb_read_aeff_collection_list.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_read_aeff_collection_list.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_read_aeff_collection_list.html#atomneb_read_aeff_collection_list", "atomneb_read_aeff_collection_list", 'routine in <a href="./atomneb_read_aeff_collection_list.html">atomneb_read_aeff_collection_list.pro</a>', "atomneb_read_aeff_collection_list.pro", "   Ashkbiz Danehkar   ", "atomneb_read_aeff_collection_list", "     This function returns the list of effective recombination coefficients (Aeff) from the 1st binary table extension      of the FITS data file ('rc_collection.fits')   ", "Atom_RC_file                     the FITS data file name ('rc_collection.fits')   ", "Recombination Lines", "   0.0.1        15/01/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       type=an array of data. This function returns the aeff_data_list:            { Aeff_Data:'',              Extention:0.0}   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_read_aeff_collection_references.html", "atomneb_read_aeff_collection_references.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_read_aeff_collection_references.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_read_aeff_collection_references.html#atomneb_read_aeff_collection_references", "atomneb_read_aeff_collection_references", 'routine in <a href="./atomneb_read_aeff_collection_references.html">atomneb_read_aeff_collection_references.pro</a>', "atomneb_read_aeff_collection_references.pro", "   Ashkbiz Danehkar   ", "atomneb_read_aeff_collection_references", "     This function returns the reference list of recombination coefficients (Aeff) from the 2nd binary table extension      of the FITS data file ('rc_collection.fits').   ", "Atom_RC_file                     the FITS data file name ('rc_collection.fits')   ", "Recombination Lines", "   0.0.1        15/01/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       type=an array of data. This function returns the aeff_data_reference:           { Reference:'',             Citation:''}   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_read_aeff_he_i_pfsd12.html", "atomneb_read_aeff_he_i_pfsd12.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_read_aeff_he_i_pfsd12.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_read_aeff_he_i_pfsd12.html#atomneb_read_aeff_he_i_pfsd12", "atomneb_read_aeff_he_i_pfsd12", 'routine in <a href="./atomneb_read_aeff_he_i_pfsd12.html">atomneb_read_aeff_he_i_pfsd12.pro</a>', "atomneb_read_aeff_he_i_pfsd12.pro", "   Ashkbiz Danehkar   ", "atomneb_read_aeff_he_i_pfsd12", "     This function returns the effective recombination coefficients (Aeff) from the table extensions      of the FITS data file ('rc_he_ii_PFSD12.fits').   ", "wavelength                     set for returning the wavelengths  reference                     set for the reference, not necessary   Atom_RC_file                     the FITS data file name ('rc_he_ii_PFSD12.fits')  atom                     atom name e.g. 'he'  ion                     ionic level e.g 'ii'   ", "Recombination Lines", "   0.0.1        15/01/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_rc_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_file= filepath('rc_he_ii_PFSD12.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> atom='he' <span class= code-prompt >IDL&gt;</span> ion='ii' ; He I <span class= code-prompt >IDL&gt;</span> hei_rc_data=atomneb_read_aeff_he_i_pfsd12(Atom_RC_file, atom, ion) <span class= code-prompt >IDL&gt;</span> hei_rc_data_wave=atomneb_read_aeff_he_i_pfsd12(Atom_RC_file, atom, ion, /wavelength) <span class= code-prompt >IDL&gt;</span> print,hei_rc_data[0].Aeff <span class= code-output >   5000.0000       10.000000      -25.379540      -25.058970      -25.948440      ...</span> <span class= code-prompt >IDL&gt;</span> temp=size(hei_rc_data_wave.Wavelength,/DIMENSIONS) <span class= code-prompt >IDL&gt;</span> n_line=temp[0] <span class= code-prompt >IDL&gt;</span> for i=0,n_line-1 do print,hei_rc_data_wave[i].Wavelength, hei_rc_data_wave[i].LowerTerm, hei_rc_data_wave[i].UpperTerm <span class= code-output >   2945.00005p^{3}P2s^{3}S</span> <span class= code-output >   3188.00004p^{3}P2s^{3}S</span> <span class= code-output >   3614.00005p^{1}P2s^{1}S</span> <span class= code-output >   ...</span>      type=an array of data. This function returns the effective recombination coefficients.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_read_aeff_he_i_pfsd12_list.html", "atomneb_read_aeff_he_i_pfsd12_list.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_read_aeff_he_i_pfsd12_list.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_read_aeff_he_i_pfsd12_list.html#atomneb_read_aeff_he_i_pfsd12_list", "atomneb_read_aeff_he_i_pfsd12_list", 'routine in <a href="./atomneb_read_aeff_he_i_pfsd12_list.html">atomneb_read_aeff_he_i_pfsd12_list.pro</a>', "atomneb_read_aeff_he_i_pfsd12_list.pro", "   Ashkbiz Danehkar   ", "atomneb_read_aeff_he_i_pfsd12_list", "     This function returns the list of effective recombination coefficients (Aeff) from the 1st binary table extension      of the FITS data file ('rc_he_ii_PFSD12.fits')   ", "Atom_RC_file                     the FITS data file name ('rc_he_ii_PFSD12.fits')   ", "Recombination Lines", "   0.0.1        15/01/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       type=an array of data. This function returns the aeff_data_list:            { Aeff_Data:'',              Extention:0.0}   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_read_aeff_he_i_pfsd12_references.html", "atomneb_read_aeff_he_i_pfsd12_references.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_read_aeff_he_i_pfsd12_references.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_read_aeff_he_i_pfsd12_references.html#atomneb_read_aeff_he_i_pfsd12_references", "atomneb_read_aeff_he_i_pfsd12_references", 'routine in <a href="./atomneb_read_aeff_he_i_pfsd12_references.html">atomneb_read_aeff_he_i_pfsd12_references.pro</a>', "atomneb_read_aeff_he_i_pfsd12_references.pro", "   Ashkbiz Danehkar   ", "atomneb_read_aeff_he_i_pfsd12_references", "     This function returns the reference list of recombination coefficients (Aeff) from the 2nd binary table extension      of the FITS data file ('rc_he_ii_PFSD12.fits').   ", "Atom_RC_file                     the FITS data file name ('rc_he_ii_PFSD12.fits')   ", "Recombination Lines", "   0.0.1        15/01/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       type=an array of data. This function returns the aeff_data_reference:           { Reference:'',             Citation:''}   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_read_aeff_n_ii_fsl13.html", "atomneb_read_aeff_n_ii_fsl13.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_read_aeff_n_ii_fsl13.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_read_aeff_n_ii_fsl13.html#atomneb_read_aeff_n_ii_fsl13", "atomneb_read_aeff_n_ii_fsl13", 'routine in <a href="./atomneb_read_aeff_n_ii_fsl13.html">atomneb_read_aeff_n_ii_fsl13.pro</a>', "atomneb_read_aeff_n_ii_fsl13.pro", "   Ashkbiz Danehkar   ", "atomneb_read_aeff_n_ii_fsl13", "     This function returns the effective recombination coefficients (Aeff) from the table extensions      of the FITS data file ('rc_n_iii_FSL13.fits').   ", "wavelength                     set for returning the wavelengths  reference                     set for the reference, not necessary   Atom_RC_file                        the FITS data file name ('rc_n_iii_FSL13.fits')  atom                        atom name e.g. 'n'  ion                        ionic level e.g 'iii'  wavelength_range                        wavelength range e.g. [4400.0, 7100.0]   ", "Recombination Lines", "   0.0.1        03/07/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_rc_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_file= filepath('rc_n_iii_FSL13.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> atom='n' <span class= code-prompt >IDL&gt;</span> ion='iii' ; N II <span class= code-prompt >IDL&gt;</span> wavelength_range=[4400.0, 7100.0] <span class= code-prompt >IDL&gt;</span> nii_rc_data=atomneb_read_aeff_n_ii_fsl13(Atom_RC_file, atom, ion, wavelength_range) <span class= code-prompt >IDL&gt;</span> nii_rc_data_wave=atomneb_read_aeff_n_ii_fsl13(Atom_RC_file, atom, ion, wavelength_range, /wavelength) <span class= code-prompt >IDL&gt;</span> print,nii_rc_data[0].Aeff <span class= code-output >   255.000      79.5000      47.3000      12.5000      ...</span> <span class= code-prompt >IDL&gt;</span> temp=size(nii_rc_data_wave.Wavelength,/DIMENSIONS) <span class= code-prompt >IDL&gt;</span> n_line=temp[0] <span class= code-prompt >IDL&gt;</span> for i=0,n_line-1 do print,nii_rc_data_wave[i].Wavelength, nii_rc_data_wave[i].Tr, nii_rc_data_wave[i].Trans <span class= code-output >   6413.236g - 4f2p6g G[9/2]o4 - 2p4f F[7/2]e3</span> <span class= code-output >   6556.326g - 4f2p6g G[9/2]o5 - 2p4f G[7/2]e4</span> <span class= code-output >   6456.976g - 4f2p6g G[9/2]o5 - 2p4f F[7/2]e4</span> <span class= code-output >   ...</span>      type=an array of data. This function returns the effective recombination coefficients.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_read_aeff_n_ii_fsl13_list.html", "atomneb_read_aeff_n_ii_fsl13_list.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_read_aeff_n_ii_fsl13_list.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_read_aeff_n_ii_fsl13_list.html#atomneb_read_aeff_n_ii_fsl13_list", "atomneb_read_aeff_n_ii_fsl13_list", 'routine in <a href="./atomneb_read_aeff_n_ii_fsl13_list.html">atomneb_read_aeff_n_ii_fsl13_list.pro</a>', "atomneb_read_aeff_n_ii_fsl13_list.pro", "   Ashkbiz Danehkar   ", "atomneb_read_aeff_n_ii_fsl13_list", "     This function returns the list of effective recombination coefficients (Aeff) from the 1st binary table extension      of the FITS data file ('rc_n_iii_FSL13.fits')   ", "Atom_RC_file                     the FITS data file name ('rc_n_iii_FSL13.fits')   ", "Recombination Lines", "   0.0.1        03/07/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       type=an array of data. This function returns the aeff_data_list:           {Aeff_Data:'',  Extention:0, $            IND:long(0), Wavelength: float(0.0), $            Tr:'',  Trans: '', T_X: ''}   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_read_aeff_n_ii_fsl13_references.html", "atomneb_read_aeff_n_ii_fsl13_references.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_read_aeff_n_ii_fsl13_references.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_read_aeff_n_ii_fsl13_references.html#atomneb_read_aeff_n_ii_fsl13_references", "atomneb_read_aeff_n_ii_fsl13_references", 'routine in <a href="./atomneb_read_aeff_n_ii_fsl13_references.html">atomneb_read_aeff_n_ii_fsl13_references.pro</a>', "atomneb_read_aeff_n_ii_fsl13_references.pro", "   Ashkbiz Danehkar   ", "atomneb_read_aeff_n_ii_fsl13_references", "     This function returns the reference list of recombination coefficients (Aeff) from the 2nd binary table extension      of the FITS data file ('rc_n_iii_FSL13.fits').   ", "Atom_RC_file                     the FITS data file name ('rc_n_iii_FSL13.fits')   ", "Recombination Lines", "   0.0.1        03/07/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       type=an array of data. This function returns the aeff_data_reference:           { Reference:'',             Citation:''}   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_read_aeff_o_ii_ssb17.html", "atomneb_read_aeff_o_ii_ssb17.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_read_aeff_o_ii_ssb17.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_read_aeff_o_ii_ssb17.html#atomneb_read_aeff_o_ii_ssb17", "atomneb_read_aeff_o_ii_ssb17", 'routine in <a href="./atomneb_read_aeff_o_ii_ssb17.html">atomneb_read_aeff_o_ii_ssb17.pro</a>', "atomneb_read_aeff_o_ii_ssb17.pro", "   Ashkbiz Danehkar   ", "atomneb_read_aeff_o_ii_ssb17", "     This function returns the effective recombination coefficients (Aeff) from the table extensions      of the FITS data file ('rc_o_iii_SSB17.fits').   ", "wavelength                     set for returning the wavelengths  reference                     set for the reference, not necessary   Atom_RC_file                        the FITS data file name ('rc_o_iii_SSB17.fits')  atom                        atom name e.g. 'o'  ion                        ionic level e.g 'iii'  case1                        set for the case 'a' or 'b', defualt 'b'  wavelength_range                        wavelength range e.g. [5320.0, 5330.0]   ", "Recombination Lines", "   0.0.1        03/07/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_rc_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_file= filepath('rc_o_iii_SSB17.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> atom='o' <span class= code-prompt >IDL&gt;</span> ion='iii' ; O II <span class= code-prompt >IDL&gt;</span> case1='B' <span class= code-prompt >IDL&gt;</span> wavelength_range=[5320.0, 5330.0] <span class= code-prompt >IDL&gt;</span> oii_rc_data=atomneb_read_aeff_o_ii_ssb17(Atom_RC_file, atom, ion, case1, wavelength_range) <span class= code-prompt >IDL&gt;</span> oii_rc_data_wave=atomneb_read_aeff_o_ii_ssb17(Atom_RC_file, atom, ion, case1, wavelength_range, /wavelength) <span class= code-prompt >IDL&gt;</span> print,oii_rc_data[0].Aeff <span class= code-output >   1.64100e-30  1.60000e-30  1.56400e-30  1.54100e-30 ...</span> <span class= code-prompt >IDL&gt;</span> temp=size(oii_rc_data_wave.Wavelength,/DIMENSIONS) <span class= code-prompt >IDL&gt;</span> n_line=temp[0] <span class= code-prompt >IDL&gt;</span> for i=0,n_line-1 do print,oii_rc_data_wave[i].Wavelength, oii_rc_data_wave[i].lower_term, oii_rc_data_wave[i].upper_term <span class= code-output >   5327.172s22p2(1S)3p 2Po</span> <span class= code-output >   5325.422s22p2(1S)3p 2Po</span> <span class= code-output >   5327.182s22p2(1D)3d 2Ge</span> <span class= code-output >   ...</span>      type=an array of data. This function returns the effective recombination coefficients.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_read_aeff_o_ii_ssb17_list.html", "atomneb_read_aeff_o_ii_ssb17_list.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_read_aeff_o_ii_ssb17_list.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_read_aeff_o_ii_ssb17_list.html#atomneb_read_aeff_o_ii_ssb17_list", "atomneb_read_aeff_o_ii_ssb17_list", 'routine in <a href="./atomneb_read_aeff_o_ii_ssb17_list.html">atomneb_read_aeff_o_ii_ssb17_list.pro</a>', "atomneb_read_aeff_o_ii_ssb17_list.pro", "   Ashkbiz Danehkar   ", "atomneb_read_aeff_o_ii_ssb17_list", "     This function returns the list of effective recombination coefficients (Aeff) from the 1st binary table extension      of the FITS data file ('rc_o_iii_SSB17.fits')   ", "Atom_RC_file                     the FITS data file name ('rc_o_iii_SSB17.fits')   ", "Recombination Lines", "   0.0.1        03/07/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       type=an array of data. This function returns the aeff_data_list:           {Aeff_Data:'',  Extention:0, $            IND:long(0), Wavelength: float(0.0), $            Case1:'',  lower_term: '', upper_term: ''}   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_read_aeff_o_ii_ssb17_references.html", "atomneb_read_aeff_o_ii_ssb17_references.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_read_aeff_o_ii_ssb17_references.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_read_aeff_o_ii_ssb17_references.html#atomneb_read_aeff_o_ii_ssb17_references", "atomneb_read_aeff_o_ii_ssb17_references", 'routine in <a href="./atomneb_read_aeff_o_ii_ssb17_references.html">atomneb_read_aeff_o_ii_ssb17_references.pro</a>', "atomneb_read_aeff_o_ii_ssb17_references.pro", "   Ashkbiz Danehkar   ", "atomneb_read_aeff_o_ii_ssb17_references", "     This function returns the reference list of recombination coefficients (Aeff) from the 2nd binary table extension      of the FITS data file ('rc_o_iii_SSB17.fits').   ", "Atom_RC_file                     the FITS data file name ('rc_o_iii_SSB17.fits')   ", "Recombination Lines", "   0.0.1        03/07/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       type=an array of data. This function returns the aeff_data_reference:           { Reference:'',             Citation:''}   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_read_aeff_ppb91.html", "atomneb_read_aeff_ppb91.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_read_aeff_ppb91.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_read_aeff_ppb91.html#atomneb_read_aeff_ppb91", "atomneb_read_aeff_ppb91", 'routine in <a href="./atomneb_read_aeff_ppb91.html">atomneb_read_aeff_ppb91.pro</a>', "atomneb_read_aeff_ppb91.pro", "   Ashkbiz Danehkar   ", "atomneb_read_aeff_ppb91", "     This function returns the effective recombination coefficients (Aeff) from the table extensions      of the FITS data file ('rc_PPB91.fits').   ", "reference                     set for the reference,  not necessary   Atom_RC_file                     the FITS data file name ('rc_PPB91.fits')  atom                     atom name e.g. 'c'  ion                     ionic level e.g 'iii'   ", "Recombination Lines", "   0.0.1        15/01/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_rc_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_file= filepath('rc_PPB91.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> atom='c' <span class= code-prompt >IDL&gt;</span> ion='iii' ; C II <span class= code-prompt >IDL&gt;</span> cii_rc_data=atomneb_read_aeff_ppb91(Atom_RC_file, atom, ion) <span class= code-prompt >IDL&gt;</span> temp=size(cii_rc_data.Wavelength,/DIMENSIONS) <span class= code-prompt >IDL&gt;</span> n_line=temp[0] <span class= code-prompt >IDL&gt;</span> for i=0,n_line-1 do print,cii_rc_data[i].Ion,cii_rc_data[i].Case1, $ <span class= code-prompt >IDL&gt;</span>                           cii_rc_data[i].Wavelength, cii_rc_data[i].a, $ <span class= code-prompt >IDL&gt;</span>                           cii_rc_data[i].b, cii_rc_data[i].c, $ <span class= code-prompt >IDL&gt;</span>                           cii_rc_data[i].d, cii_rc_data[i].br, $ <span class= code-prompt >IDL&gt;</span>                           cii_rc_data[i].Q, cii_rc_data[i].y <span class= code-output >   C2+A       9903.4600      0.69700000     -0.78400000      ...</span> <span class= code-output >   C2+A       4267.1500       1.0110000     -0.75400000      ...</span> <span class= code-output >   ...</span>      type=an array of data. This function returns the effective recombination coefficients:           { Ion: ' '             Case1:''             Wavelength:0.0,             a: 0.0,             b: 0.0,             c: 0.0,             d: 0.0,             br: 0.0,             y: 0.0}   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_read_aeff_ppb91_list.html", "atomneb_read_aeff_ppb91_list.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_read_aeff_ppb91_list.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_read_aeff_ppb91_list.html#atomneb_read_aeff_ppb91_list", "atomneb_read_aeff_ppb91_list", 'routine in <a href="./atomneb_read_aeff_ppb91_list.html">atomneb_read_aeff_ppb91_list.pro</a>', "atomneb_read_aeff_ppb91_list.pro", "   Ashkbiz Danehkar   ", "atomneb_read_aeff_ppb91_list", "     This function returns the list of effective recombination coefficients (Aeff) from the 1st binary table extension      of the FITS data file ('rc_PPB91.fits')   ", "Atom_RC_file                     the FITS data file name ('rc_PPB91.fits')   ", "Recombination Lines", "   0.0.1        15/01/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       type=an array of data. This function returns the aeff_data_list:           { Aeff_Data:'',             Extention:0.0}   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_read_aeff_ppb91_references.html", "atomneb_read_aeff_ppb91_references.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_read_aeff_ppb91_references.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_read_aeff_ppb91_references.html#atomneb_read_aeff_ppb91_references", "atomneb_read_aeff_ppb91_references", 'routine in <a href="./atomneb_read_aeff_ppb91_references.html">atomneb_read_aeff_ppb91_references.pro</a>', "atomneb_read_aeff_ppb91_references.pro", "   Ashkbiz Danehkar   ", "atomneb_read_aeff_ppb91_references", "     This function returns the reference list of recombination coefficients (Aeff) from the 2nd binary table extension      of the FITS data file ('rc_PPB91.fits').   ", "Atom_RC_file                     the FITS data file name ('rc_PPB91.fits')   ", "Recombination Lines", "   0.0.1        15/01/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       type=an array of data. This function returns the aeff_data_reference:           { Reference:'',             Citation:''}   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_read_aeff_sh95.html", "atomneb_read_aeff_sh95.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_read_aeff_sh95.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_read_aeff_sh95.html#atomneb_read_aeff_sh95", "atomneb_read_aeff_sh95", 'routine in <a href="./atomneb_read_aeff_sh95.html">atomneb_read_aeff_sh95.pro</a>', "atomneb_read_aeff_sh95.pro", "   Ashkbiz Danehkar   ", "atomneb_read_aeff_sh95", "     This function returns the effective recombination coefficients (Aeff) from the table extensions      of the FITS data file ('rc_SH95.fits').   ", "reference                     set for the reference,  not necessary  case1                     set for the case 'a' or 'b', defualt 'b'   Atom_RC_file                     the FITS data file name ('rc_SH95.fits')  atom                     atom name e.g. 'h'  ion                     ionic level e.g 'ii'   ", "Recombination Lines", "   0.0.1        15/01/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_rc_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_file= filepath('rc_SH95.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> atom='h' <span class= code-prompt >IDL&gt;</span> ion='ii' ; H I <span class= code-prompt >IDL&gt;</span> hi_rc_data=atomneb_read_aeff_sh95(Atom_RC_file, atom, ion) <span class= code-prompt >IDL&gt;</span> print,hi_rc_data[0].Aeff <span class= code-output >   100.00000       500.00000       0.0000000   4.2140000e-27    1.7560000e-27  ...</span> <span class= code-output >   ...</span>      type=an array of data. This function returns the effective recombination coefficients.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_read_aeff_sh95_list.html", "atomneb_read_aeff_sh95_list.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_read_aeff_sh95_list.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_read_aeff_sh95_list.html#atomneb_read_aeff_sh95_list", "atomneb_read_aeff_sh95_list", 'routine in <a href="./atomneb_read_aeff_sh95_list.html">atomneb_read_aeff_sh95_list.pro</a>', "atomneb_read_aeff_sh95_list.pro", "   Ashkbiz Danehkar   ", "atomneb_read_aeff_sh95_list", "     This function returns the list of effective recombination coefficients (Aeff) from the 1st binary table extension      of the FITS data file ('rc_SH95.fits')   ", "Atom_RC_file                     the FITS data file name ('rc_SH95.fits')   ", "Recombination Lines", "   0.0.1        15/01/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       type=an array of data. This function returns the aeff_data_list:           { Aeff_Data:'',             Extention:0.0}   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_read_aeff_sh95_references.html", "atomneb_read_aeff_sh95_references.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_read_aeff_sh95_references.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_read_aeff_sh95_references.html#atomneb_read_aeff_sh95_references", "atomneb_read_aeff_sh95_references", 'routine in <a href="./atomneb_read_aeff_sh95_references.html">atomneb_read_aeff_sh95_references.pro</a>', "atomneb_read_aeff_sh95_references.pro", "   Ashkbiz Danehkar   ", "atomneb_read_aeff_sh95_references", "     This function returns the reference list of recombination coefficients (Aeff) from the 2nd binary table extension      of the FITS data file ('rc_SH95.fits').   ", "Atom_RC_file                     the FITS data file name ('rc_SH95.fits')   ", "Recombination Lines", "   0.0.1        15/01/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       type=an array of data. This function returns the aeff_data_reference:           { Reference:'',             Citation:''}   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_read_aij.html", "atomneb_read_aij.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_read_aij.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_read_aij.html#atomneb_read_aij", "atomneb_read_aij", 'routine in <a href="./atomneb_read_aij.html">atomneb_read_aij.pro</a>', "atomneb_read_aij.pro", "   Ashkbiz Danehkar   ", "atomneb_read_aij", "     This function returns the transition probabilities (Aij) from the table extensions      of the FITS data file ('AtomAij.fits').   ", "reference                     set for the reference,  not necessary  level_num                     set for the maximum level number.   Atom_Aij_fileatom                     atom name e.g. 'o'  ion                     ionic level e.g 'iii'   ", "Collisionally Excited Lines", "   0.0.1        24/12/2015, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_dir = ['atomic-data', 'collection'] <span class= code-prompt >IDL&gt;</span> Atom_Aij_file = filepath('AtomAij.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> atom='o' <span class= code-prompt >IDL&gt;</span> ion='iii' <span class= code-prompt >IDL&gt;</span> reference='FFT04' <span class= code-prompt >IDL&gt;</span> oiii_aij_data=atomneb_read_aij(Atom_Aij_file, atom, ion, reference=reference) <span class= code-prompt >IDL&gt;</span> print,oiii_aij_data.Aij[*,*] <span class= code-output >   0.0000000   2.5960000e-05   3.0300000e-11   2.3220000e-06       0.0000000    0.0021910000</span> <span class= code-output >   0.0000000       0.0000000   9.6320000e-05    0.0069510000      0.22550000       230.80000</span> <span class= code-output >   0.0000000       0.0000000       0.0000000     0.020290000   0.00069980000       576.50000</span> <span class= code-output >   0.0000000       0.0000000       0.0000000       0.0000000       1.6850000    0.0057770000</span> <span class= code-output >   0.0000000       0.0000000       0.0000000       0.0000000       0.0000000   3.7600000e-11</span> <span class= code-output >   0.0000000       0.0000000       0.0000000       0.0000000       0.0000000       0.0000000</span>      type=an array of data. This function returns the aij_data:           { Aij:dblarr(n_level,n_level) }.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_read_aij_list.html", "atomneb_read_aij_list.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_read_aij_list.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_read_aij_list.html#atomneb_read_aij_list", "atomneb_read_aij_list", 'routine in <a href="./atomneb_read_aij_list.html">atomneb_read_aij_list.pro</a>', "atomneb_read_aij_list.pro", "   Ashkbiz Danehkar   ", "atomneb_read_aij_list", "     This function returns the list of transition probabilities (Aij) from the 1st binary table extension      of the FITS data file ('AtomAij.fits').   ", "Atom_Aij_file                     the FITS data file name ('AtomAij.fits')   ", "Collisionally Excited Lines", "   0.0.1        24/12/2015, IDL code by A. Danehkar     This library is released under a GNU General Public License.       type=an array of data. This function returns the aij_data_list:           { Aij_Data:'',             Extention:0.0}   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_read_aij_references.html", "atomneb_read_aij_references.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_read_aij_references.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_read_aij_references.html#atomneb_read_aij_references", "atomneb_read_aij_references", 'routine in <a href="./atomneb_read_aij_references.html">atomneb_read_aij_references.pro</a>', "atomneb_read_aij_references.pro", "   Ashkbiz Danehkar   ", "atomneb_read_aij_references", "     This function returns the reference list of transition probabilities (Aij) from the 1nd binary table extension      of the FITS data file ('AtomAij.fits').   ", "Atom_Aij_file                     the FITS data file name ('AtomAij.fits')   ", "Collisionally Excited Lines", "   0.0.1        24/12/2015, IDL code by A. Danehkar     This library is released under a GNU General Public License.       type=an array of data. This function returns the aij_data_reference:           { Reference:'',             Citation:''}   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_read_elj.html", "atomneb_read_elj.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_read_elj.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_read_elj.html#atomneb_read_elj", "atomneb_read_elj", 'routine in <a href="./atomneb_read_elj.html">atomneb_read_elj.pro</a>', "atomneb_read_elj.pro", "   Ashkbiz Danehkar   ", "atomneb_read_elj", "     This function returns the energy levels (Ej) from the table extensions      of the FITS data file ('AtomElj.fits').   ", "level_num                     set for the maximum level number.   Atom_Elj_file                     the FITS data file name ('AtomElj.fits')  atom                     atom name e.g. 'o'  ion                     ionic level e.g 'iii'   ", "Collisionally Excited Lines", "   0.0.1        24/12/2015, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_dir = ['atomic-data', 'collection'] <span class= code-prompt >IDL&gt;</span> Atom_Elj_file = filepath('AtomElj.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> atom='o' <span class= code-prompt >IDL&gt;</span> ion='iii' <span class= code-prompt >IDL&gt;</span> oiii_elj_data=atomneb_read_elj(Atom_Elj_file, atom, ion, level_num=6) <span class= code-prompt >IDL&gt;</span> print,oiii_elj_data.J_v <span class= code-output >   0.00000      1.00000      2.00000      2.00000      0.00000      2.00000</span> <span class= code-prompt >IDL&gt;</span> print,oiii_elj_data.Ej <span class= code-output >   0.0000000       113.17800       306.17400       20273.270       43185.740       60324.790</span>      type=an array of data. This function returns the elj_data:           { Configuration:'',             Term:'',             J:'',             J_v:0.0,             Ej:0.0,             Reference:''}.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_read_elj_list.html", "atomneb_read_elj_list.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_read_elj_list.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_read_elj_list.html#atomneb_read_elj_list", "atomneb_read_elj_list", 'routine in <a href="./atomneb_read_elj_list.html">atomneb_read_elj_list.pro</a>', "atomneb_read_elj_list.pro", "   Ashkbiz Danehkar   ", "atomneb_read_elj_list", "     This function returns the list of energy levels (Ej) from the 1st binary table extension      of the FITS data file ('AtomElj.fits')   ", "Atom_Elj_file                     the FITS data file name ('AtomElj.fits')   ", "Collisionally Excited Lines", "   0.0.1        24/12/2015, IDL code by A. Danehkar     This library is released under a GNU General Public License.       type=an array of data. This function returns the elj_data_list:           { Elj_Data:'',             Extention:0.0}   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_read_elj_references.html", "atomneb_read_elj_references.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_read_elj_references.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_read_elj_references.html#atomneb_read_elj_references", "atomneb_read_elj_references", 'routine in <a href="./atomneb_read_elj_references.html">atomneb_read_elj_references.pro</a>', "atomneb_read_elj_references.pro", "   Ashkbiz Danehkar   ", "atomneb_read_elj_references", "     This function returns the reference list of energy levels (Ej) from the 2nd binary table extension      of the FITS data file ('AtomElj.fits').   ", "Atom_Elj_file                      the FITS data file name ('AtomElj.fits')   ", "Collisionally Excited Lines", "   0.0.1        24/12/2015, IDL code by A. Danehkar     This library is released under a GNU General Public License.       type=an array of data. This function returns the aij_data_reference:           { Reference:'',             Citation:''}   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_read_omij.html", "atomneb_read_omij.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_read_omij.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_read_omij.html#atomneb_read_omij", "atomneb_read_omij", 'routine in <a href="./atomneb_read_omij.html">atomneb_read_omij.pro</a>', "atomneb_read_omij.pro", "   Ashkbiz Danehkar   ", "atomneb_read_omij", "     This function returns the collision strengths (omega_ij) from the table extensions      of the FITS data file ('AtomOmij.fits').   ", "reference                     set for the reference e.g. 'SSB14'  level_num                     set for the maximum level number.   Atom_Omij_file                     the FITS data file name ('AtomOmij.fits')  atom                     atom name e.g. 'o'  ion                     ionic level e.g 'iii'   ", "Collisionally Excited Lines", "   0.0.1        24/12/2015, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_dir = ['atomic-data', 'collection'] <span class= code-prompt >IDL&gt;</span> Atom_Omij_file = filepath('AtomOmij.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> atom='o' <span class= code-prompt >IDL&gt;</span> ion='iii' <span class= code-prompt >IDL&gt;</span> reference='SSB14' <span class= code-prompt >IDL&gt;</span> oiii_omij_data=atomneb_read_omij(Atom_Omij_file, atom, ion, reference=reference) <span class= code-prompt >IDL&gt;</span> print,oiii_omij_data.level1 <span class= code-output >   0       1       1       1       1       2       2       2       3       3       4</span> <span class= code-prompt >IDL&gt;</span> print,oiii_omij_data.level2 <span class= code-output >   0       2       3       4       5       3       4       5       4       5       5</span> <span class= code-prompt >IDL&gt;</span> print,oiii_omij_data[0].strength <span class= code-output >   100.00000       125.89254       158.48932       199.52623       251.18864       ...</span>      type=an array of data. This function returns the omij_data:           { level1:0,             level2:0,             strength:dblarr(temp_steps)}.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_read_omij_list.html", "atomneb_read_omij_list.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_read_omij_list.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_read_omij_list.html#atomneb_read_omij_list", "atomneb_read_omij_list", 'routine in <a href="./atomneb_read_omij_list.html">atomneb_read_omij_list.pro</a>', "atomneb_read_omij_list.pro", "   Ashkbiz Danehkar   ", "atomneb_read_omij_list", "     This function returns the list of collision strengths (omega_ij) from the 1st binary table extension      of the FITS data file ('AtomOmij.fits').   ", "Atom_Omij_file                     the FITS data file name ('AtomOmij.fits')   ", "Collisionally Excited Lines", "   0.0.1        24/12/2015, IDL code by A. Danehkar     This library is released under a GNU General Public License.       type=an array of data. This function returns the omij_data_list:           { Omij_Data:'',             Extention:0.0}   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_read_omij_references.html", "atomneb_read_omij_references.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_read_omij_references.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_read_omij_references.html#atomneb_read_omij_references", "atomneb_read_omij_references", 'routine in <a href="./atomneb_read_omij_references.html">atomneb_read_omij_references.pro</a>', "atomneb_read_omij_references.pro", "   Ashkbiz Danehkar   ", "atomneb_read_omij_references", "     This function returns the reference list of collision strengths (omega_ij) from the 2nd binary table extension      of the FITS data file ('AtomOmij.fits').   ", "Atom_Omij_file                       the FITS data file name ('AtomOmij.fits')   ", "Collisionally Excited Lines", "   0.0.1        24/12/2015, IDL code by A. Danehkar     This library is released under a GNU General Public License.       type=an array of data. This function returns the aij_data_reference:           { Reference:'',             Citation:''}   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_search_aeff_collection.html", "atomneb_search_aeff_collection.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_search_aeff_collection.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_search_aeff_collection.html#atomneb_search_aeff_collection", "atomneb_search_aeff_collection", 'routine in <a href="./atomneb_search_aeff_collection.html">atomneb_search_aeff_collection.pro</a>', "atomneb_search_aeff_collection.pro", "   Ashkbiz Danehkar   ", "atomneb_search_aeff_collection", "     This function searches effective recombination coefficients (Aeff) for given element      and ionic levels in the FITS data file ('rc_collection.fits'), and returns the data entry.   ", "br                     set for the branching ratios (Br), may not necessary   Atom_RC_file                     the FITS data file name ('rc_collection.fits')  atom                     atom name e.g. 'c'  ion                     ionic level e.g 'iii'   ", "Recombination Lines", "   0.0.1        15/01/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_rc_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_file= filepath('rc_collection.fits', root_dir=base_dir, subdir=data_rc_dir ) <span class= code-prompt >IDL&gt;</span> atom='c' <span class= code-prompt >IDL&gt;</span> ion='iii' ; C III <span class= code-prompt >IDL&gt;</span> list_cii_aeff_data=atomneb_search_aeff_collection(Atom_RC_file, atom, ion) <span class= code-prompt >IDL&gt;</span> print,list_cii_aeff_data <span class= code-output >   c_iii_aeff</span>      type=array of data. This function returns the Aeff_Data.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_search_aeff_he_i_pfsd12.html", "atomneb_search_aeff_he_i_pfsd12.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_search_aeff_he_i_pfsd12.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_search_aeff_he_i_pfsd12.html#atomneb_search_aeff_he_i_pfsd12", "atomneb_search_aeff_he_i_pfsd12", 'routine in <a href="./atomneb_search_aeff_he_i_pfsd12.html">atomneb_search_aeff_he_i_pfsd12.pro</a>', "atomneb_search_aeff_he_i_pfsd12.pro", "   Ashkbiz Danehkar   ", "atomneb_search_aeff_he_i_pfsd12", "     This function searches effective recombination coefficients (Aeff) for given element      and ionic levels in the FITS data file ('rec_he_ii_PFSD12.fits'), and returns the data entry.   ", "Atom_RC_file                     the FITS data file name ('rc_he_ii_PFSD12.fits')  atom                     atom name e.g. 'he'  ion                     ionic level e.g 'ii'   ", "Recombination Lines", "   0.0.1        15/01/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_rc_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_file= filepath('rc_he_ii_PFSD12.fits', root_dir=base_dir, subdir=data_rc_dir ) <span class= code-prompt >IDL&gt;</span> atom='he' <span class= code-prompt >IDL&gt;</span> ion='ii' ; He I <span class= code-prompt >IDL&gt;</span> list_hei_aeff_data=atomneb_search_aeff_he_i_pfsd12(Atom_RC_file, atom, ion) <span class= code-prompt >IDL&gt;</span> print,list_hei_aeff_data <span class= code-output >   he_ii_aeff_PFSD12 he_ii_aeff_PFSD13</span>      type=array of data. This function returns the Aeff_Data.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_search_aeff_n_ii_fsl13.html", "atomneb_search_aeff_n_ii_fsl13.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_search_aeff_n_ii_fsl13.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_search_aeff_n_ii_fsl13.html#atomneb_search_aeff_n_ii_fsl13", "atomneb_search_aeff_n_ii_fsl13", 'routine in <a href="./atomneb_search_aeff_n_ii_fsl13.html">atomneb_search_aeff_n_ii_fsl13.pro</a>', "atomneb_search_aeff_n_ii_fsl13.pro", "   Ashkbiz Danehkar   ", "atomneb_search_aeff_n_ii_fsl13", "     This function searches effective recombination coefficients (Aeff) for given element      and ionic levels in the FITS data file ('rc_n_iii_FSL13.fits'), and returns the data entry.   ", "Atom_RC_file                     the FITS data file name ('rc_n_iii_FSL13.fits')  atom                     atom name e.g. 'n'  ion                     ionic level e.g 'iii'   wavelength", "Recombination Lines", "   0.0.1        03/07/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_rc_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_file= filepath('rc_n_iii_FSL13.fits', root_dir=base_dir, subdir=data_rc_dir ) <span class= code-prompt >IDL&gt;</span> atom='n' <span class= code-prompt >IDL&gt;</span> ion='iii' ; N II <span class= code-prompt >IDL&gt;</span> wavelength=5679.56 <span class= code-prompt >IDL&gt;</span> list_nii_aeff_data=atomneb_search_aeff_n_ii_fsl13(Atom_RC_file, atom, ion, wavelength) <span class= code-prompt >IDL&gt;</span> print,list_nii_aeff_data.Wavelength <span class= code-output >   5679.56</span> <span class= code-prompt >IDL&gt;</span> print,list_nii_aeff_data.Aeff <span class= code-output >   7810.00      1780.00      850.000      151.000      74.4000      53.1000      47.4000</span> <span class= code-output >   7370.00      1700.00      886.000      206.000      110.000      80.1000      70.8000</span> <span class= code-output >   7730.00      1680.00      900.000      239.000      138.000      103.000      92.9000</span> <span class= code-output >   8520.00      1710.00      905.000      244.000      142.000      107.000      97.0000</span>      type=array of data. This function returns the Aeff_Data.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_search_aeff_o_ii_ssb17.html", "atomneb_search_aeff_o_ii_ssb17.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_search_aeff_o_ii_ssb17.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_search_aeff_o_ii_ssb17.html#atomneb_search_aeff_o_ii_ssb17", "atomneb_search_aeff_o_ii_ssb17", 'routine in <a href="./atomneb_search_aeff_o_ii_ssb17.html">atomneb_search_aeff_o_ii_ssb17.pro</a>', "atomneb_search_aeff_o_ii_ssb17.pro", "   Ashkbiz Danehkar   ", "atomneb_search_aeff_o_ii_ssb17", "     This function searches effective recombination coefficients (Aeff) for given element      and ionic levels in the FITS data file ('rc_o_iii_SSB17.fits'), and returns the data entry.   ", "Atom_RC_file                     the FITS data file name ('rc_o_iii_SSB17.fits')  atom                     atom name e.g. 'o'  ion                     ionic level e.g 'iii'  case1                        set for the case 'a' or 'b', defualt 'b'  wavelength                     set the wavelengths   ", "Recombination Lines", "   0.0.1        03/07/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_rc_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_file= filepath('rc_o_iii_SSB17.fits', root_dir=base_dir, subdir=data_rc_dir ) <span class= code-prompt >IDL&gt;</span> atom='o' <span class= code-prompt >IDL&gt;</span> ion='iii' ; O II <span class= code-prompt >IDL&gt;</span> case1='B' <span class= code-prompt >IDL&gt;</span> wavelength=5325.42 <span class= code-prompt >IDL&gt;</span> list_oii_aeff_data=atomneb_search_aeff_o_ii_ssb17(Atom_RC_file, atom, ion, case1, wavelength) <span class= code-prompt >IDL&gt;</span> print,list_oii_aeff_data.Wavelength <span class= code-output >   5325.42</span> <span class= code-prompt >IDL&gt;</span> print,list_oii_aeff_data.Aeff <span class= code-output >   3.41800e-32  3.33300e-32  3.25700e-32  3.20900e-32  3.16800e-32 ...</span>      type=array of data. This function returns the Aeff_Data.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_search_aeff_ppb91.html", "atomneb_search_aeff_ppb91.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_search_aeff_ppb91.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_search_aeff_ppb91.html#atomneb_search_aeff_ppb91", "atomneb_search_aeff_ppb91", 'routine in <a href="./atomneb_search_aeff_ppb91.html">atomneb_search_aeff_ppb91.pro</a>', "atomneb_search_aeff_ppb91.pro", "   Ashkbiz Danehkar   ", "atomneb_search_aeff_ppb91", "     This function searches effective recombination coefficients (Aeff) for given element      and ionic levels in the FITS data file ('rec_PPB91.fits'), and returns the data entry.   ", "Atom_RC_file                     the FITS data file name ('rc_PPB91.fits')  atom                     atom name e.g. 'c'  ion                     ionic level e.g 'iii'   ", "Recombination Lines", "   0.0.1        15/01/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_rc_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_file= filepath('rc_PPB91.fits', root_dir=base_dir, subdir=data_rc_dir ) <span class= code-prompt >IDL&gt;</span> atom='c' <span class= code-prompt >IDL&gt;</span> ion='iii' <span class= code-prompt >IDL&gt;</span> list_cii_aeff_data=atomneb_search_aeff_ppb91(Atom_RC_file, atom, ion) <span class= code-prompt >IDL&gt;</span> print,list_cii_aeff_data <span class= code-output >   c_iii_aeff</span>      type=array of data. This function returns the Aeff_Data.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_search_aeff_sh95.html", "atomneb_search_aeff_sh95.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_search_aeff_sh95.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_search_aeff_sh95.html#atomneb_search_aeff_sh95", "atomneb_search_aeff_sh95", 'routine in <a href="./atomneb_search_aeff_sh95.html">atomneb_search_aeff_sh95.pro</a>', "atomneb_search_aeff_sh95.pro", "   Ashkbiz Danehkar   ", "atomneb_search_aeff_sh95", "     This function searches effective recombination coefficients (Aeff) for given element      and ionic levels in the FITS data file ('rec_SH95.fits'), and returns the data entry.   ", "Atom_RC_file                     the FITS data file name ('rc_SH95.fits')  atom                     atom name e.g. 'h'  ion                     ionic level e.g 'ii'   ", "Recombination Lines", "   0.0.1        15/01/2017, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_rc_dir = ['atomic-data-rc'] <span class= code-prompt >IDL&gt;</span> Atom_RC_file= filepath('rc_SH95.fits', root_dir=base_dir, subdir=data_rc_dir ) <span class= code-prompt >IDL&gt;</span> atom='h' <span class= code-prompt >IDL&gt;</span> ion='ii' ; H I <span class= code-prompt >IDL&gt;</span> list_hi_aeff_data=atomneb_search_aeff_sh95(Atom_RC_file, atom, ion) <span class= code-prompt >IDL&gt;</span> print,list_hi_aeff_data <span class= code-output >   h_ii_aeff_a h_ii_aeff_b</span>      type=array of data. This function returns the Aeff_Data.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_search_aij.html", "atomneb_search_aij.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_search_aij.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_search_aij.html#atomneb_search_aij", "atomneb_search_aij", 'routine in <a href="./atomneb_search_aij.html">atomneb_search_aij.pro</a>', "atomneb_search_aij.pro", "   Ashkbiz Danehkar   ", "atomneb_search_aij", "     This function searches transition probabilities (Aij) for given element      and ionic levels in the FITS data file ('AtomAij.fits'), and returns the data entry.   ", "Atom_Aij_file                     the FITS data file name ('AtoAij.fits')  atom                     atom name e.g. 'o'  ion                     ionic level e.g 'iii'   ", "Collisionally Excited Lines", "   0.0.1        24/12/2015, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_dir = ['atomic-data', 'collection'] <span class= code-prompt >IDL&gt;</span> Atom_Aij_file = filepath('AtomAij.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> atom='o' <span class= code-prompt >IDL&gt;</span> ion='iii' <span class= code-prompt >IDL&gt;</span> list_oiii_aij_data=atomneb_search_aij(Atom_Aij_file, atom, ion) <span class= code-prompt >IDL&gt;</span> print,list_oiii_aij_data <span class= code-output >   o_iii_aij_FFT04-SZ00 o_iii_aij_FFT04 o_iii_aij_GMZ97-WFD96 o_iii_aij_SZ00-WFD96</span>      type=array of data. This function returns the Aij_Data.   ");
  
  

libdata[libdataItem++] = new Array("./atomneb_search_omij.html", "atomneb_search_omij.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "atomneb_search_omij.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./atomneb_search_omij.html#atomneb_search_omij", "atomneb_search_omij", 'routine in <a href="./atomneb_search_omij.html">atomneb_search_omij.pro</a>', "atomneb_search_omij.pro", "   Ashkbiz Danehkar   ", "atomneb_search_omij", "     This function searches collision strengths (omega_ij) for given element      and ionic levels in the FITS data file ('AtomOmij.fits'), and returns the data entry.   ", "Atom_Omij_file                     the FITS data file name ('AtomOmij.fits')  atom                     atom name e.g. 'o'  ion                     ionic level e.g 'iii'   ", "Collisionally Excited Lines", "   0.0.1        24/12/2015, IDL code by A. Danehkar     This library is released under a GNU General Public License.       For example: <span class= code-prompt >IDL&gt;</span> base_dir = file_dirname(file_dirname((routine_info('$MAIN$', /source)).path)) <span class= code-prompt >IDL&gt;</span> data_dir = ['atomic-data', 'collection'] <span class= code-prompt >IDL&gt;</span> Atom_Omij_file = filepath('AtomOmij.fits', root_dir=base_dir, subdir=data_dir ) <span class= code-prompt >IDL&gt;</span> atom='o' <span class= code-prompt >IDL&gt;</span> ion='iii' <span class= code-prompt >IDL&gt;</span> list_oiii_omij_data=atomneb_search_omij(Atom_Omij_file, atom, ion) <span class= code-prompt >IDL&gt;</span> print,list_oiii_omij_data <span class= code-output >   o_iii_omij_AK99 o_iii_omij_LB94 o_iii_omij_Pal12-AK99 o_iii_omij_SSB14</span>      type=array of data. This function returns the Omij_Data.   ");
  
  

